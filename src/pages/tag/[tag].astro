---
// src/pages/tag/[tag].astro - VERSIÓN CORREGIDA CON VALIDACIONES
import BaseLayout from '../../layouts/BaseLayout.astro';
import Container from '../../components/ui/Container.astro';
import ArticleList from '../../components/blog/ArticleList.astro';
import Button from '../../components/ui/Button.astro';
import Badge from '../../components/ui/Badge.astro';
import Card from '../../components/ui/Card.astro';
import Breadcrumb from '../../components/common/Breadcrumb.astro';
import Newsletter from '../../components/common/Newsletter.astro';

// 🔧 IMPORTAR UTILIDADES CORREGIDAS
import {
 generateTagSlug,
 getTagColor,
 createSafeTagStats,
 getSafeTrendingTags,
 getRelatedTags,
 searchByTags,
 generateTagBreadcrumbs,
 validateTag,
 type TagData
} from '../../utils/tags.ts';

// ✅ HABILITAR PRERENDER
export const prerender = true;

// 🔧 TIPOS TYPESCRIPT
interface Article {
 id: string;
 title: string;
 excerpt: string;
 image: string;
 date: string;
 author: {
   name: string;
   avatar: string;
 };
 readingTime: number;
 categories: string[];
}

interface TagInfo {
 slug: string;
 name: string;
 description: string;
 color: string;
 category?: string;
 articlesCount: number;
 featured?: boolean;
 trending?: boolean;
}

export async function getStaticPaths() {
 // 🔧 FUNCIÓN PARA AVATARES REALES DE AUTORES
function getAuthorAvatar(authorName: string): string {
 const authorAvatars: Record<string, string> = {
   'Ana María Prieto': '/images/ana-p2.webp',
   'Manuel Alejandro Bedoya': '/images/manuel-p1.webp',
   'Equipo Editorial Balto': '/images/baltologo.svg',
   'Editor Balto': '/images/baltologo.svg'
 };
 
 return authorAvatars[authorName] || '/images/baltologo.svg';
}

 let allArticles: any[] = [];
 let allTags: any[] = [];
 
 try {
   const { getCollection } = await import('astro:content');
   allArticles = await getCollection('articulos').catch(() => []);
   allTags = await getCollection('etiquetas').catch(() => []);
   
   // Filtrar solo artículos publicados
   allArticles = allArticles.filter((article: any) => 
     article && article.data && article.data.status === 'published'
   );
   
   console.log(`📊 Cargados: ${allArticles.length} artículos, ${allTags.length} tags del CMS`);
 } catch (error) {
   console.log('⚠️ Error cargando contenido:', error);
   allArticles = [];
   allTags = [];
 }

 // 📊 CALCULAR ESTADÍSTICAS DE TAGS DE FORMA SEGURA
 const tagStats = createSafeTagStats(allArticles);
 const paths: any[] = [];

 console.log(`📊 TagStats generado con ${tagStats.size} tags únicos`);

 // 🏷️ PROCESAR TAGS DEL CMS
 for (const tagFromCMS of allTags) {
   if (!validateTag(tagFromCMS.data)) {
     console.log(`⚠️ Tag inválido encontrado:`, tagFromCMS);
     continue;
   }
   
   const tagSlug = tagFromCMS.data.slug || generateTagSlug(tagFromCMS.data.name);
   const tagName = tagFromCMS.data.name;
   
   // Buscar artículos con este tag
   const tagArticles = searchByTags(allArticles, [tagSlug]);
   
   const processedArticles: Article[] = tagArticles.map((article: any) => ({
     id: article.slug || 'unknown',
     title: article.data?.title || 'Sin título',
     excerpt: article.data?.description || article.data?.excerpt || '',
     image: article.data?.image || '/images/articles/default.jpg',
     date: article.data?.date ? article.data.date.toISOString().split('T')[0] : new Date().toISOString().split('T')[0],
     author: {
       name: article.data?.author || 'Editor Balto',
       avatar: getAuthorAvatar(article.data?.author || 'Editor Balto')
     },
     readingTime: article.data?.readingTime || 5,
     categories: [article.data?.category, ...(article.data?.tags || [])].filter(Boolean)
   }));

   const tagInfo: TagInfo = {
     slug: tagSlug,
     name: tagName,
     description: tagFromCMS.data?.description || `Artículos sobre ${tagName.toLowerCase()}`,
     color: tagFromCMS.data?.color || getTagColor(tagName, tagFromCMS.data?.category),
     category: tagFromCMS.data?.category,
     articlesCount: processedArticles.length,
     featured: tagFromCMS.data?.featured || false,
     trending: tagFromCMS.data?.trending || false
   };

   paths.push({
     params: { tag: tagSlug },
     props: { 
       tag: tagInfo,
       articles: processedArticles,
       tagStats: tagStats,
       allArticlesForPopularTags: allArticles
     }
   });
 }

 // 🔍 TAGS DINÁMICOS DE ARTÍCULOS (si no están en CMS)
 for (const [tagSlug, count] of tagStats.entries()) {
   // Si ya está en el CMS, saltar
   if (paths.some(path => path.params.tag === tagSlug)) continue;
   
   // Crear tag dinámico
   const tagArticles = searchByTags(allArticles, [tagSlug]);
   
   if (tagArticles.length === 0) continue;
   
   const processedArticles: Article[] = tagArticles.map((article: any) => ({
     id: article.slug || 'unknown',
     title: article.data?.title || 'Sin título',
     excerpt: article.data?.description || article.data?.excerpt || '',
     image: article.data?.image || '/images/articles/default.jpg',
     date: article.data?.date ? article.data.date.toISOString().split('T')[0] : new Date().toISOString().split('T')[0],
     author: {
       name: article.data?.author || 'Editor Balto',
       avatar: getAuthorAvatar(article.data?.author || 'Editor Balto')
     },
     readingTime: article.data?.readingTime || 5,
     categories: [article.data?.category, ...(article.data?.tags || [])].filter(Boolean)
   }));

   // Generar nombre amigable del slug
   const tagName = tagSlug
     .split('-')
     .map(word => word.charAt(0).toUpperCase() + word.slice(1))
     .join(' ');

   const tagInfo: TagInfo = {
     slug: tagSlug,
     name: tagName,
     description: `Artículos relacionados con ${tagName.toLowerCase()}`,
     color: getTagColor(tagName),
     articlesCount: count,
     featured: false,
     trending: false
   };

   paths.push({
     params: { tag: tagSlug },
     props: { 
       tag: tagInfo,
       articles: processedArticles,
       tagStats: tagStats,
       allArticlesForPopularTags: allArticles
     }
   });
 }

 // 🚨 FALLBACK si no hay paths
 if (paths.length === 0) {
   console.log('⚠️ No se encontraron tags, generando fallbacks');
   const fallbackTags = [
     { slug: 'cachorros', name: 'Cachorros', description: 'Contenido sobre cachorros' },
     { slug: 'entrenamiento', name: 'Entrenamiento', description: 'Artículos sobre entrenamiento' },
     { slug: 'alimentacion', name: 'Alimentación', description: 'Guías de alimentación' }
   ];
   
   return fallbackTags.map((tagData) => ({
     params: { tag: tagData.slug },
     props: { 
       tag: {
         slug: tagData.slug,
         name: tagData.name,
         description: tagData.description,
         color: getTagColor(tagData.name),
         articlesCount: 0,
         featured: false,
         trending: false
       },
       articles: [] as Article[],
       tagStats: new Map(),
       allArticlesForPopularTags: []
     }
   }));
 }

 console.log(`✅ Generados ${paths.length} paths para tags`);
 return paths;
}

// 🔧 OBTENER PROPS CON VALIDACIÓN
const { tag, articles = [], tagStats, allArticlesForPopularTags = [] } = Astro.props;

// Validar que tag existe
if (!tag) {
 console.error('❌ Tag no definido en props');
 return Astro.redirect('/404');
}

// 🔗 TAGS RELACIONADOS CON VALIDACIÓN
let relatedTags: any[] = [];
try {
 const { getCollection } = await import('astro:content');
 const allTagsFromCMS = await getCollection('etiquetas').catch(() => []);
 
 const validTagsFromCMS: TagData[] = allTagsFromCMS
   .filter((t: any) => validateTag(t.data))
   .map((t: any) => ({
     slug: t.data.slug || generateTagSlug(t.data.name),
     name: t.data.name,
     description: t.data.description || '',
     color: t.data.color || 'gray',
     category: t.data.category || '',
     articlesCount: tagStats instanceof Map ? (tagStats.get(t.data.slug || generateTagSlug(t.data.name)) || 0) : 0,
     featured: t.data.featured || false,
     trending: t.data.trending || false
   }));

 relatedTags = getRelatedTags(tag.slug, validTagsFromCMS);
} catch (error) {
 console.log('⚠️ Error cargando tags relacionados:', error);
 relatedTags = [];
}

// 🔧 FUNCIÓN PARA OBTENER TAGS POPULARES REALES DE ARTÍCULOS (IDÉNTICA A ARTICULOS/INDEX.ASTRO)
function getPopularTagsFromArticles(articles: any[], limit: number = 8) {
  const allTags: string[] = [];
  
  articles.forEach(article => {
    if (article.data?.category) {
      allTags.push(article.data.category);
    }
    if (article.data?.tags && Array.isArray(article.data.tags)) {
      allTags.push(...article.data.tags);
    }
  });
  
  // Contar frecuencia de cada tag
  const tagCounts = allTags.reduce((acc, tag) => {
    const normalizedTag = tag.toLowerCase().trim();
    acc[normalizedTag] = (acc[normalizedTag] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  
  // Ordenar por frecuencia y tomar los más populares
  return Object.entries(tagCounts)
    .sort(([,a], [,b]) => b - a)
    .slice(0, limit)
    .map(([tag, count]) => ({
      name: tag.charAt(0).toUpperCase() + tag.slice(1),
      slug: tag.toLowerCase().replace(/\s+/g, '-'),
      count: count
    }));
}

// 🔧 CALCULAR TAGS POPULARES USANDO TODOS LOS ARTÍCULOS
const popularTags = getPopularTagsFromArticles(allArticlesForPopularTags, 8);

// 🔥 TAGS TRENDING CON VALIDACIÓN
const trendingTags = getSafeTrendingTags(tagStats, 8);

// 📍 BREADCRUMBS
const breadcrumbItems = generateTagBreadcrumbs(tag.slug, tag);

// 🎨 CLASSES CSS SEGÚN COLOR
const getColorClasses = (color: string) => {
 const colorMap: Record<string, string> = {
   'green': 'bg-green-100 text-green-800 border-green-200',
   'blue': 'bg-blue-100 text-blue-800 border-blue-200',
   'purple': 'bg-purple-100 text-purple-800 border-purple-200',
   'orange': 'bg-orange-100 text-orange-800 border-orange-200',
   'red': 'bg-red-100 text-red-800 border-red-200',
   'yellow': 'bg-yellow-100 text-yellow-800 border-yellow-200',
   'pink': 'bg-pink-100 text-pink-800 border-pink-200',
   'indigo': 'bg-indigo-100 text-indigo-800 border-indigo-200',
   'teal': 'bg-teal-100 text-teal-800 border-teal-200',
   'cyan': 'bg-cyan-100 text-cyan-800 border-cyan-200',
   'gray': 'bg-gray-100 text-gray-800 border-gray-200'
 };
 return colorMap[color] || colorMap.gray;
};

const tagColorClasses = getColorClasses(tag.color);

// 🔧 OBTENER CONTADOR SEGURO PARA TRENDING TAGS
const getTagCount = (tagSlug: string): number => {
 if (!(tagStats instanceof Map)) return 0;
 return tagStats.get(tagSlug) || 0;
};
---

<BaseLayout
 title={`${tag.name} | Artículos sobre ${tag.name.toLowerCase()}`}
 description={tag.description}
>
 {/* Breadcrumbs */}
 <Container class="pt-6">
   <Breadcrumb items={breadcrumbItems} currentPage={tag.name} />
 </Container>

 {/* Hero con colores de la paleta */}
 <div class="relative bg-gradient-to-br from-green-500 to-green-600 text-white overflow-hidden">
   {/* Patrón de fondo decorativo */}
   <div class="absolute inset-0 opacity-10">
     <div class="absolute -top-4 -right-4 w-32 h-32 bg-white rounded-full blur-xl"></div>
     <div class="absolute top-1/2 -left-8 w-24 h-24 bg-yellow-300 rounded-full blur-lg"></div>
     <div class="absolute -bottom-6 right-1/3 w-40 h-40 bg-white rounded-full blur-2xl"></div>
   </div>
   
   <!-- Ondas decorativas -->
   <div class="absolute bottom-0 left-0 right-0">
     <svg viewBox="0 0 1200 120" class="w-full h-12 fill-current text-white">
       <path d="M0,60 C300,120 900,0 1200,60 L1200,120 L0,120 Z" />
     </svg>
   </div>
   
   <Container>
     <div class="py-16 md:py-20 relative z-10">
       <div class="max-w-4xl mx-auto text-center">
         {/* Badge del tag */}
         <div class="inline-block mb-6">
           <span class="bg-white/20 backdrop-blur-sm text-white px-6 py-3 rounded-full text-sm font-bold uppercase tracking-wider border border-white/30">
             🏷️ Etiqueta
           </span>
         </div>
         
         <h1 class="text-4xl md:text-6xl font-bold mb-6 text-white leading-tight">
           {tag.name}
         </h1>
         <p class="text-xl md:text-2xl opacity-95 mb-10 leading-relaxed max-w-3xl mx-auto">
           {tag.description}
         </p>
         
         {/* Estadísticas */}
         <div class="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-2xl mx-auto mb-8">
           <div class="bg-white/15 backdrop-blur-sm rounded-xl p-4 border border-white/20">
             <div class="text-3xl font-bold text-yellow-300">{articles.length}</div>
             <div class="text-sm opacity-90">Artículos</div>
           </div>
           <div class="bg-white/15 backdrop-blur-sm rounded-xl p-4 border border-white/20">
             <div class="text-3xl font-bold text-yellow-300">{relatedTags.length}</div>
             <div class="text-sm opacity-90">Tags relacionados</div>
           </div>
           <div class="bg-white/15 backdrop-blur-sm rounded-xl p-4 border border-white/20">
             <div class="text-3xl font-bold text-yellow-300">5★</div>
             <div class="text-sm opacity-90">Calidad</div>
           </div>
         </div>
         
         {/* Enlaces rápidos */}
         {tag.category && (
           <div class="mt-8">
             <a 
               href={`/categorias/${generateTagSlug(tag.category)}`}
               class="group bg-white/10 hover:bg-white/20 backdrop-blur-sm text-white px-6 py-3 rounded-full text-sm font-medium transition-all duration-300 border border-white/20 hover:border-white/40 hover:scale-105"
             >
               <span class="group-hover:mr-2 transition-all duration-200">Ver categoría: {tag.category}</span>
               <span class="opacity-0 group-hover:opacity-100 transition-opacity duration-200">→</span>
             </a>
           </div>
         )}
       </div>
     </div>
   </Container>
 </div>
 
 <Container class="py-16">
   <div class="grid grid-cols-1 lg:grid-cols-12 gap-12">
     {/* Contenido principal */}
     <div class="lg:col-span-8">
       {articles.length > 0 ? (
         <div>
           <div class="mb-8 bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
             <p class="text-gray-900 text-lg">
               Se encontraron <span class={`font-bold px-2 py-1 rounded ${tagColorClasses}`}>{articles.length}</span> artículos con la etiqueta "{tag.name}"
             </p>
           </div>
           
           <ArticleList
              articles={articles}
              layout="grid"
              columns={2}
           />
         </div>
       ) : (
         <div class="bg-white rounded-xl p-12 text-center border border-gray-200 shadow-sm">
           <div class="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
             <span class="text-3xl">📝</span>
           </div>
           <h2 class="text-2xl font-bold text-gray-900 mb-4">No hay artículos aún</h2>
           <p class="text-gray-600 mb-8 text-lg">
             Aún no hay artículos publicados con la etiqueta "{tag.name}".
           </p>
           <div class="flex flex-col sm:flex-row gap-4 justify-center">
             <Button href="/blog" variant="primary" size="lg">
               Explorar todos los artículos
             </Button>
             <Button href="/admin/" variant="outline" size="lg">
               Crear nuevo artículo
             </Button>
           </div>
         </div>
       )}
     </div>
     
     {/* Sidebar */}
     <div class="lg:col-span-4">
       <div class="sticky top-[140px] space-y-8">
         {/* 🔥 TEMAS POPULARES - IDÉNTICO A ARTICULOS/INDEX.ASTRO */}
         {popularTags.length > 0 && (
           <Card class="p-8">
             <div class="flex items-center gap-3 mb-6">
               <div class="w-8 h-8 bg-gradient-to-br from-orange-500 to-red-500 rounded-lg flex items-center justify-center">
                 <span class="text-white text-sm">🔥</span>
               </div>
               <h3 class="text-xl font-bold text-gray-900">Temas Populares</h3>
             </div>
             
             <div class="flex flex-wrap gap-2">
               {popularTags.map((popularTag: any) => (
                 <a 
                   href={`/tag/${popularTag.slug}`}
                   class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gradient-to-r from-orange-100 to-red-100 text-orange-800 hover:from-orange-200 hover:to-red-200 transition-all duration-200"
                 >
                   {popularTag.name}
                 </a>
               ))}
             </div>
           </Card>
         )}
         
         {/* Newsletter */}
         <Newsletter />
       </div>
     </div>
   </div>
 </Container>
</BaseLayout>

<style>
 .line-clamp-2 {
   display: -webkit-box;
   -webkit-line-clamp: 2;
   -webkit-box-orient: vertical;
   overflow: hidden;
 }

 .transition-all {
   transition: all 0.3s ease;
 }

 .hover\:scale-105:hover {
   transform: scale(1.05);
 }

 @media (max-width: 768px) {
   .sticky {
     position: relative;
     top: auto;
   }
 }

 html {
   scroll-behavior: smooth;
 }

 /* Glassmorphism effects */
 .backdrop-blur-sm {
   backdrop-filter: blur(4px);
 }

 /* Gradientes dinámicos */
 .bg-gradient-to-br {
   background-size: 200% 200%;
   animation: gradient-shift 8s ease infinite;
 }

 @keyframes gradient-shift {
   0%, 100% { background-position: 0% 50%; }
   50% { background-position: 100% 50%; }
 }
</style>