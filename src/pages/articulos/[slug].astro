---
// src/pages/articulos/[slug].astro - VERSIÓN COMPATIBLE CON TU TAGS.TS
import { getCollection, type CollectionEntry } from 'astro:content';
import ArticleLayout from '../../layouts/ArticleLayout.astro';
import { generateTagSlug } from '../../utils/tags.ts';


type ArticuloEntry = CollectionEntry<'articulos'>;

export const prerender = true;

export async function getStaticPaths() {
  const articulos = await getCollection('articulos');
  
  // Filtrar solo artículos publicados
  const publishedArticles = articulos.filter((article: ArticuloEntry) => 
    article.data.status === 'published'
  );

  console.log(`📰 Generando ${publishedArticles.length} artículos para Balto`);
  
  return publishedArticles.map((articulo: ArticuloEntry) => {
    // 🔧 VALIDACIÓN SIMPLE USANDO TU FUNCIÓN EXISTENTE
    if (import.meta.env.DEV) {
      // Solo en desarrollo, verificar que el slug sea válido
      if (!articulo.slug || articulo.slug.length < 3) {
        console.warn(`⚠️ Slug problemático: ${articulo.slug}`);
        // Sugerir slug usando tu función existente
        const suggestedSlug = generateTagSlug(articulo.data.title);
        console.log(`💡 Slug sugerido: ${suggestedSlug}`);
      }
    }

    return {
      params: { slug: articulo.slug },
      props: { articulo }
    };
  });
}

const { articulo } = Astro.props;

if (!articulo) {
  return Astro.redirect('/404');
}

const { Content } = await articulo.render();

function getAuthorAvatar(authorName: string): string {
  // Normalizar el nombre removiendo acentos y espacios extra
  const normalizedName = authorName?.trim().toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, ''); // Remueve acentos
  
  const authorAvatars: Record<string, string> = {
    // Versiones con acentos
    'Ana María Prieto': '/images/ana-p2.webp',
    'Manuel Alejandro Bedoya': '/images/manuel-p1.webp',
    'Equipo Editorial Balto': '/images/baltologo.svg',
    
  };
  
  // Primero intentar con el nombre original
  if (authorAvatars[authorName]) {
    console.log(`✅ Avatar encontrado para: "${authorName}"`);
    return authorAvatars[authorName];
  }
  
  // Luego intentar con el nombre normalizado
  if (authorAvatars[normalizedName]) {
    console.log(`✅ Avatar encontrado (normalizado) para: "${authorName}" → "${normalizedName}"`);
    return authorAvatars[normalizedName];
  }
  
  // Debug: mostrar qué nombre está llegando
  console.log(`❌ No se encontró avatar para: "${authorName}" (normalizado: "${normalizedName}")`);
  console.log('📝 Nombres disponibles:', Object.keys(authorAvatars));
  
  return '/images/authors/default.jpg';
}


// 🔥 CARGAR ARTÍCULOS REALES DEL CMS PARA EL SIDEBAR - CON TIPOS CORRECTOS
let allArticles: ArticuloEntry[] = [];
try {
  allArticles = await getCollection('articulos');
  allArticles = allArticles.filter((art: ArticuloEntry) => art.data.status === 'published');
} catch (error) {
  console.log('ℹ️ No se pudieron cargar artículos para sidebar');
  allArticles = [];
}

// 📈 GENERAR ARTÍCULOS POPULARES REALES (ordenados por fecha)
const popularArticles = allArticles
  .filter((art: ArticuloEntry) => art.slug !== articulo.slug)
  .sort((a: ArticuloEntry, b: ArticuloEntry) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime())
  .slice(0, 5)
  .map((art: ArticuloEntry) => ({
    title: art.data.title,
    slug: art.slug,
    readingTime: art.data.readingTime || 5,
    category: art.data.category || 'General'
  }));

// 📰 GENERAR ARTÍCULOS RELACIONADOS (misma categoría)
const relatedArticles = allArticles
  .filter((art: ArticuloEntry) => 
    art.slug !== articulo.slug && 
    art.data.category === articulo.data.category
  )
  .slice(0, 3)
  .map((art: ArticuloEntry) => ({
    id: art.slug,
    title: art.data.title,
    image: art.data.image || '/images/articles/default.jpg',
    readingTime: art.data.readingTime || 5
  }));

// 🎯 GENERAR BREADCRUMBS DINÁMICOS PARA BALTO
const breadcrumbItems = [
  { label: 'Inicio', href: '/', icon: '🏠' },
  { label: 'Artículos', href: '/articulos', icon: '📰' }
];

// Agregar categoría si existe
if (articulo.data.category) {
  breadcrumbItems.push({
    label: articulo.data.category.charAt(0).toUpperCase() + articulo.data.category.slice(1),
    href: `/categorias/${articulo.data.category}`,
    icon: '📂'
  });
}

// Preparar datos para TU LAYOUT ORIGINAL con todos los estilos
const articleData = {
  title: articulo.data.title,
  description: articulo.data.description,
  author: {
    name: articulo.data.author,
    avatar: getAuthorAvatar(articulo.data.author || 'Editor Balto'), // ← CAMBIO AQUÍ
    bio: articulo.data.authorBio || 'Especialista en cuidado y bienestar de mascotas'
  },
  date: articulo.data.date.toISOString(),
  readingTime: articulo.data.readingTime || 5,
  categories: articulo.data.tags || [articulo.data.category],
  image: articulo.data.image,
  views: articulo.data.views || 0,
  showTableOfContents: true,
  popularArticles: popularArticles,
  relatedArticles: relatedArticles
};

// 🎯 LOG PARA DEBUGGING (solo en desarrollo)
if (import.meta.env.DEV) {
  console.log(`🎯 Renderizando artículo: ${articulo.data.title}`);
  console.log(`📊 Artículos relacionados: ${relatedArticles.length}`);
  console.log(`🔥 Artículos populares: ${popularArticles.length}`);
}
---

<ArticleLayout {...articleData}>
  <Content />
</ArticleLayout>