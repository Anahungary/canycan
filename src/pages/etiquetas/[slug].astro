---
// src/pages/etiquetas/[slug].astro - RUTAS DINÁMICAS PARA ETIQUETAS
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Container from '../../components/ui/Container.astro';
import ArticleList from '../../components/blog/ArticleList.astro';
import Button from '../../components/ui/Button.astro';
import Badge from '../../components/ui/Badge.astro';
import Card from '../../components/ui/Card.astro';

// 🔧 IMPORTAR UTILIDADES DE TAGS
import {
  generateTagSlug,
  getTagColor,
  createSafeTagStats,
  searchByTags,
  validateTag
} from '../../utils/tags.ts';

// ✅ HABILITAR PRERENDER
export const prerender = true;

// 🔧 TIPOS TYPESCRIPT
interface Article {
  id: string;
  title: string;
  excerpt: string;
  image: string;
  date: string;
  author: {
    name: string;
    avatar: string;
  };
  readingTime: number;
  categories: string[];
}

interface TagInfo {
  slug: string;
  name: string;
  description: string;
  color: string;
  articlesCount: number;
  featured?: boolean;
}

export async function getStaticPaths() {
  let allArticles: any[] = [];
  let allTags: any[] = [];
  
  try {
    allArticles = await getCollection('articulos');
    allTags = await getCollection('etiquetas');
    
    // Filtrar solo artículos publicados
    allArticles = allArticles.filter((article: any) => 
      article && article.data && article.data.status === 'published'
    );
    
    console.log(`📊 [Etiquetas] Cargados: ${allArticles.length} artículos, ${allTags.length} etiquetas del CMS`);
  } catch (error) {
    console.log('⚠️ Error cargando contenido:', error);
    allArticles = [];
    allTags = [];
  }

  const paths: any[] = [];

  // 🏷️ PROCESAR ETIQUETAS DEL CMS
  for (const etiquetaFromCMS of allTags) {
    if (!validateTag(etiquetaFromCMS.data)) {
      console.log(`⚠️ Etiqueta inválida:`, etiquetaFromCMS);
      continue;
    }
    
    const etiquetaSlug = etiquetaFromCMS.data.slug || generateTagSlug(etiquetaFromCMS.data.name);
    const etiquetaName = etiquetaFromCMS.data.name;
    
    // Buscar artículos con esta etiqueta
    const articulosConEtiqueta = allArticles.filter((article: any) => {
      const tags = article.data.tags || [];
      const category = article.data.category || '';
      
      return tags.includes(etiquetaSlug) || 
             tags.includes(etiquetaName) ||
             category === etiquetaSlug ||
             category === etiquetaName ||
             // Búsqueda flexible
             tags.some((tag: string) => 
               tag.toLowerCase().includes(etiquetaSlug.toLowerCase()) ||
               tag.toLowerCase().includes(etiquetaName.toLowerCase())
             );
    });
    
    const processedArticles: Article[] = articulosConEtiqueta.map((article: any) => ({
      id: article.slug || 'unknown',
      title: article.data?.title || 'Sin título',
      excerpt: article.data?.description || article.data?.excerpt || '',
      image: article.data?.image || '/images/articles/default.jpg',
      date: article.data?.date ? 
        article.data.date.toISOString().split('T')[0] : 
        new Date().toISOString().split('T')[0],
      author: {
        name: article.data?.author || 'Editor Balto',
        avatar: '/images/authors/default.jpg'
      },
      readingTime: article.data?.readingTime || 5,
      categories: [article.data?.category, ...(article.data?.tags || [])].filter(Boolean)
    }));

    const tagInfo: TagInfo = {
      slug: etiquetaSlug,
      name: etiquetaName,
      description: etiquetaFromCMS.data.description || `Artículos relacionados con ${etiquetaName.toLowerCase()}`,
      color: etiquetaFromCMS.data.color || getTagColor(etiquetaName),
      articlesCount: processedArticles.length,
      featured: etiquetaFromCMS.data.featured || false
    };

    paths.push({
      params: { slug: etiquetaSlug },
      props: { 
        tag: tagInfo,
        articles: processedArticles
      }
    });
    
    console.log(`✅ Generada ruta para etiqueta: /etiquetas/${etiquetaSlug} (${processedArticles.length} artículos)`);
  }

  // 🏷️ GENERAR TAMBIÉN ETIQUETAS DINÁMICAS DE ARTÍCULOS (tags que no están en CMS)
  const tagStats = createSafeTagStats(allArticles);
  
  for (const [tagSlug, count] of tagStats.entries()) {
    // Solo agregar si no existe ya en el CMS
    const existeEnCMS = allTags.some(tag => 
      (tag.data.slug || generateTagSlug(tag.data.name)) === tagSlug
    );
    
    if (!existeEnCMS && count > 0) {
      const tagArticles = searchByTags(allArticles, [tagSlug]);
      
      const processedArticles: Article[] = tagArticles.map((article: any) => ({
        id: article.slug || 'unknown',
        title: article.data?.title || 'Sin título',
        excerpt: article.data?.description || article.data?.excerpt || '',
        image: article.data?.image || '/images/articles/default.jpg',
        date: article.data?.date ? 
          article.data.date.toISOString().split('T')[0] : 
          new Date().toISOString().split('T')[0],
        author: {
          name: article.data?.author || 'Editor Balto',
          avatar: '/images/authors/default.jpg'
        },
        readingTime: article.data?.readingTime || 5,
        categories: [article.data?.category, ...(article.data?.tags || [])].filter(Boolean)
      }));

      // Generar nombre amigable del slug
      const tagName = tagSlug
        .split('-')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');

      const tagInfo: TagInfo = {
        slug: tagSlug,
        name: tagName,
        description: `Artículos relacionados con ${tagName.toLowerCase()}`,
        color: getTagColor(tagName),
        articlesCount: count,
        featured: false
      };

      paths.push({
        params: { slug: tagSlug },
        props: { 
          tag: tagInfo,
          articles: processedArticles
        }
      });
      
      console.log(`✅ Generada ruta dinámica: /etiquetas/${tagSlug} (${count} artículos)`);
    }
  }

  // 🚨 FALLBACK si no hay paths
  if (paths.length === 0) {
    console.log('⚠️ No se encontraron etiquetas, generando fallbacks básicos');
    const fallbackTags = [
      { slug: 'salud-dental', name: 'Salud Dental', description: 'Contenido sobre salud dental' },
      { slug: 'cachorros', name: 'Cachorros', description: 'Contenido sobre cachorros' },
      { slug: 'entrenamiento', name: 'Entrenamiento', description: 'Artículos sobre entrenamiento' },
      { slug: 'alimentacion', name: 'Alimentación', description: 'Guías de alimentación' }
    ];
    
    return fallbackTags.map((tagData) => ({
      params: { slug: tagData.slug },
      props: { 
        tag: {
          slug: tagData.slug,
          name: tagData.name,
          description: tagData.description,
          color: getTagColor(tagData.name),
          articlesCount: 0,
          featured: false
        },
        articles: [] as Article[]
      }
    }));
  }

  console.log(`✅ Total de paths generados para etiquetas: ${paths.length}`);
  return paths;
}

// 🔧 OBTENER PROPS CON VALIDACIÓN
const { tag, articles = [] } = Astro.props;

// Validar que tag existe
if (!tag) {
  console.error('❌ Tag no definido en props');
  return Astro.redirect('/404');
}

// 🎨 CLASSES CSS SEGÚN COLOR
const getColorClasses = (color: string) => {
  const colorMap: Record<string, string> = {
    'green': 'from-green-500 to-green-600',
    'blue': 'from-blue-500 to-blue-600',
    'purple': 'from-purple-500 to-purple-600',
    'orange': 'from-orange-500 to-orange-600',
    'red': 'from-red-500 to-red-600',
    'yellow': 'from-yellow-500 to-yellow-600',
    'pink': 'from-pink-500 to-pink-600',
    'indigo': 'from-indigo-500 to-indigo-600',
    'teal': 'from-teal-500 to-teal-600',
    'cyan': 'from-cyan-500 to-cyan-600',
    'gray': 'from-gray-500 to-gray-600'
  };
  return colorMap[tag.color] || colorMap.gray;
};

const tagColorClasses = getColorClasses(tag.color);

// 🔗 ETIQUETAS RELACIONADAS (simuladas)
const relatedTags = [
  { slug: 'salud', name: 'Salud', color: 'red' },
  { slug: 'cuidado', name: 'Cuidado', color: 'green' },
  { slug: 'veterinaria', name: 'Veterinaria', color: 'blue' },
  { slug: 'prevencion', name: 'Prevención', color: 'purple' }
].filter(t => t.slug !== tag.slug);
---

<BaseLayout
  title={`${tag.name} | Etiquetas Balto`}
  description={tag.description}
>
  {/* Breadcrumbs */}
  <Container class="pt-6">
    <nav class="flex items-center text-sm text-gray-500" aria-label="Breadcrumb">
      <a href="/" class="hover:text-green-600 transition-colors">Inicio</a>
      <span class="mx-2">→</span>
      <a href="/etiquetas" class="hover:text-green-600 transition-colors">Etiquetas</a>
      <span class="mx-2">→</span>
      <span class="text-gray-700 font-medium">{tag.name}</span>
    </nav>
  </Container>

  {/* Hero con colores dinámicos */}
  <div class={`relative bg-gradient-to-br ${tagColorClasses} text-white overflow-hidden`}>
    {/* Patrón de fondo decorativo */}
    <div class="absolute inset-0 opacity-10">
      <div class="absolute -top-4 -right-4 w-32 h-32 bg-white rounded-full blur-xl"></div>
      <div class="absolute top-1/2 -left-8 w-24 h-24 bg-yellow-300 rounded-full blur-lg"></div>
      <div class="absolute -bottom-6 right-1/3 w-40 h-40 bg-white rounded-full blur-2xl"></div>
    </div>
    
    <!-- Ondas decorativas -->
    <div class="absolute bottom-0 left-0 right-0">
      <svg viewBox="0 0 1200 120" class="w-full h-12 fill-current text-white">
        <path d="M0,60 C300,120 900,0 1200,60 L1200,120 L0,120 Z" />
      </svg>
    </div>
    
    <Container>
      <div class="py-16 md:py-20 relative z-10">
        <div class="max-w-4xl mx-auto text-center">
          {/* Badge de etiqueta */}
          <div class="inline-block mb-6">
            <span class="bg-white/20 backdrop-blur-sm text-white px-6 py-3 rounded-full text-sm font-bold uppercase tracking-wider border border-white/30">
              🏷️ Etiqueta
            </span>
          </div>
          
          <h1 class="text-4xl md:text-6xl font-bold mb-6 text-white leading-tight">
            {tag.name}
          </h1>
          <p class="text-xl md:text-2xl opacity-95 mb-10 leading-relaxed max-w-3xl mx-auto">
            {tag.description}
          </p>
          
          {/* Estadísticas */}
          <div class="grid grid-cols-2 md:grid-cols-3 gap-6 max-w-2xl mx-auto">
            <div class="bg-white/15 backdrop-blur-sm rounded-xl p-4 border border-white/20">
              <div class="text-3xl font-bold text-yellow-300">{articles.length}</div>
              <div class="text-sm opacity-90">Artículos</div>
            </div>
            <div class="bg-white/15 backdrop-blur-sm rounded-xl p-4 border border-white/20">
              <div class="text-3xl font-bold text-yellow-300">{tag.featured ? '⭐' : '📖'}</div>
              <div class="text-sm opacity-90">{tag.featured ? 'Popular' : 'Tema'}</div>
            </div>
            <div class="bg-white/15 backdrop-blur-sm rounded-xl p-4 border border-white/20 md:block hidden">
              <div class="text-3xl font-bold text-yellow-300">5★</div>
              <div class="text-sm opacity-90">Calidad</div>
            </div>
          </div>
        </div>
      </div>
    </Container>
  </div>
  
  <Container class="py-16">
    <div class="grid grid-cols-1 lg:grid-cols-12 gap-12">
      {/* Contenido principal */}
      <div class="lg:col-span-8">
        {articles.length > 0 ? (
          <>
            {/* Header de artículos */}
            <div class="flex items-center gap-3 mb-8">
              <div class="w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg">
                <span class="text-2xl text-white">📚</span>
              </div>
              <h2 class="text-3xl font-bold text-gray-900">
                Artículos sobre {tag.name}
              </h2>
              <div class="flex-1 h-px bg-gradient-to-r from-green-200 to-transparent"></div>
            </div>
            
            <ArticleList 
              articles={articles} 
              layout="grid" 
              columns={2}
            />
          </>
        ) : (
          <div class="bg-gradient-to-br from-gray-50 to-yellow-50 rounded-xl p-12 text-center border-2 border-yellow-200">
            <div class="text-6xl mb-4">📝</div>
            <h3 class="text-2xl font-bold text-gray-900 mb-4">
              No hay artículos disponibles
            </h3>
            <p class="text-gray-600 mb-6">
              Aún no tenemos artículos específicos para la etiqueta "{tag.name}", pero estamos trabajando en crear contenido sobre este tema.
            </p>
            <div class="flex flex-col sm:flex-row gap-4 justify-center">
              <Button href="/articulos" variant="primary">
                Ver todos los artículos
              </Button>
              <Button href="/etiquetas" variant="outline">
                Explorar otras etiquetas
              </Button>
            </div>
          </div>
        )}
      </div>
      
      {/* Sidebar */}
      <div class="lg:col-span-4">
        <div class="sticky top-[140px] space-y-8">
          {/* Etiquetas relacionadas */}
          {relatedTags.length > 0 && (
            <Card class="p-8">
              <div class="flex items-center gap-3 mb-6">
                <div class="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-600 rounded-lg flex items-center justify-center shadow-md">
                  <span class="text-lg text-white">🔗</span>
                </div>
                <h3 class="text-xl font-bold text-gray-900">Etiquetas relacionadas</h3>
              </div>
              
              <div class="flex flex-wrap gap-3">
                {relatedTags.map(relatedTag => (
                  <a 
                    href={`/etiquetas/${relatedTag.slug}`}
                    class={`inline-block px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 hover:scale-105 shadow-sm hover:shadow-md
                      ${relatedTag.color === 'red' ? 'bg-red-100 hover:bg-red-200 text-red-800' : ''}
                      ${relatedTag.color === 'green' ? 'bg-green-100 hover:bg-green-200 text-green-800' : ''}
                      ${relatedTag.color === 'blue' ? 'bg-blue-100 hover:bg-blue-200 text-blue-800' : ''}
                      ${relatedTag.color === 'purple' ? 'bg-purple-100 hover:bg-purple-200 text-purple-800' : ''}
                      ${!relatedTag.color ? 'bg-gray-100 hover:bg-gray-200 text-gray-800' : ''}
                    `}
                  >
                    {relatedTag.name}
                  </a>
                ))}
              </div>
            </Card>
          )}
          
          {/* CTA Newsletter */}
          <Card class="p-8 bg-gradient-to-br from-green-50 to-emerald-50 border-green-200">
            <div class="flex items-center gap-3 mb-4">
              <div class="w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg">
                <span class="text-xl text-white">📬</span>
              </div>
              <h3 class="text-xl font-bold text-gray-900">¡No te pierdas nada!</h3>
            </div>
            
            <p class="text-gray-600 mb-6">
              Suscríbete para recibir los últimos artículos sobre {tag.name.toLowerCase()} y otros temas de cuidado de mascotas.
            </p>
            
            <Button href="/newsletter" variant="primary" class="w-full">
              Suscribirse al newsletter
            </Button>
          </Card>
          
          {/* Volver a etiquetas */}
          <Card class="p-8 text-center">
            <div class="text-4xl mb-4">🏷️</div>
            <h3 class="text-lg font-bold text-gray-900 mb-3">
              Explorar más etiquetas
            </h3>
            <p class="text-gray-600 text-sm mb-6">
              Descubre otros temas de interés
            </p>
            <Button href="/etiquetas" variant="outline" class="w-full">
              Ver todas las etiquetas
            </Button>
          </Card>
        </div>
      </div>
    </div>
  </Container>
</BaseLayout>