// src/data/breeds/index.js - Versi√≥n corregida con manejo de errores

// Importar razas de perros por secciones alfab√©ticas
import { dogsAC } from './dogs-a-c.js';     // Razas A-C
import { dogsDH } from './dogs-d-h.js';     // Razas D-H  
import { dogsIM } from './dogs-i-m.js';     // Razas I-M
import { dogsNZ } from './dogs-n-z.js';     // Razas N-Z

// Importar razas de gatos
import { catsALL } from './cats-all.js';    // Todas las razas de gatos

// üõ°Ô∏è FUNCI√ìN DE VALIDACI√ìN Y LIMPIEZA
function validateBreed(breed) {
  // Verificar que el objeto existe y tiene las propiedades m√≠nimas requeridas
  if (!breed || typeof breed !== 'object') {
    console.warn('‚ùå Raza inv√°lida encontrada (no es objeto):', breed);
    return false;
  }
  
  // Verificar propiedades esenciales
  if (!breed.id || typeof breed.id !== 'string') {
    console.warn('‚ùå Raza sin ID v√°lido:', breed);
    return false;
  }
  
  if (!breed.name || typeof breed.name !== 'string') {
    console.warn('‚ùå Raza sin nombre v√°lido:', breed);
    return false;
  }
  
  if (!breed.type || !['dog', 'cat'].includes(breed.type)) {
    console.warn('‚ùå Raza con tipo inv√°lido:', breed);
    return false;
  }
  
  // Verificar propiedades num√©ricas b√°sicas
  const numericFields = ['energyLevel', 'friendliness', 'grooming', 'training'];
  for (const field of numericFields) {
    if (breed[field] && (typeof breed[field] !== 'number' || breed[field] < 1 || breed[field] > 5)) {
      console.warn(`‚ùå Raza con ${field} inv√°lido:`, breed);
      return false;
    }
  }
  
  return true;
}

// üîß FUNCI√ìN PARA COMBINAR Y LIMPIAR ARRAYS
function combineAndCleanBreeds(...breedArrays) {
  const allBreeds = [];
  
  breedArrays.forEach((breedArray, index) => {
    if (!Array.isArray(breedArray)) {
      console.warn(`‚ùå Array de razas inv√°lido en posici√≥n ${index}:`, breedArray);
      return;
    }
    
    breedArray.forEach((breed, breedIndex) => {
      if (validateBreed(breed)) {
        allBreeds.push(breed);
      } else {
        console.warn(`‚ùå Raza inv√°lida en array ${index}, posici√≥n ${breedIndex}:`, breed);
      }
    });
  });
  
  return allBreeds;
}

// üöÄ COMBINAR TODAS LAS RAZAS CON VALIDACI√ìN
const breedsData = combineAndCleanBreeds(
  dogsAC || [],
  dogsDH || [],
  dogsIM || [],
  dogsNZ || [],
  catsALL || []
);

// üìä ESTAD√çSTICAS DE DEPURACI√ìN
console.log('üìä Estad√≠sticas de carga de razas:');
console.log('  - dogsAC:', Array.isArray(dogsAC) ? dogsAC.length : 'ERROR');
console.log('  - dogsDH:', Array.isArray(dogsDH) ? dogsDH.length : 'ERROR');
console.log('  - dogsIM:', Array.isArray(dogsIM) ? dogsIM.length : 'ERROR');
console.log('  - dogsNZ:', Array.isArray(dogsNZ) ? dogsNZ.length : 'ERROR');
console.log('  - catsALL:', Array.isArray(catsALL) ? catsALL.length : 'ERROR');
console.log('  - Total v√°lidas:', breedsData.length);

// üõ°Ô∏è VALIDACI√ìN FINAL DEL ARRAY
if (breedsData.length === 0) {
  console.error('üö® ERROR CR√çTICO: No se cargaron razas v√°lidas');
  
  // Fallback con razas b√°sicas para evitar que la app se rompa
  const fallbackBreeds = [
    {
      id: 'labrador-retriever',
      name: 'Labrador Retriever',
      image: '/images/breeds/labrador-retriever.jpg',
      description: 'Raza amigable y leal, perfecta para familias.',
      size: 'large',
      energyLevel: 4,
      friendliness: 5,
      grooming: 2,
      training: 5,
      type: 'dog',
      goodWith: ['children', 'dogs'],
      hypoallergenic: false,
      furLength: 'short',
      noiseLevel: 3,
      healthIssues: 3,
      costLevel: 3,
      independenceLevel: 2,
      suitableFor: ['families', 'companion']
    },
    {
      id: 'persian-cat',
      name: 'Persa',
      image: '/images/breeds/persian.jpg',
      description: 'Gato elegante y tranquilo.',
      size: 'medium',
      energyLevel: 2,
      friendliness: 3,
      grooming: 5,
      training: 2,
      type: 'cat',
      goodWith: ['seniors', 'apartments'],
      hypoallergenic: false,
      furLength: 'long',
      noiseLevel: 1,
      healthIssues: 4,
      costLevel: 4,
      independenceLevel: 4,
      suitableFor: ['companion']
    }
  ];
  
  console.log('üîÑ Usando razas de fallback:', fallbackBreeds.length);
  breedsData.push(...fallbackBreeds);
}

// üìà ESTAD√çSTICAS FINALES CON VALIDACI√ìN SEGURA
const stats = {
  // Usar filtros seguros para evitar errores de undefined
  dogs: breedsData.filter(breed => breed && breed.type === 'dog').length,
  cats: breedsData.filter(breed => breed && breed.type === 'cat').length,
  total: breedsData.length,
  
  // Estad√≠sticas por tama√±o (solo perros)
  smallDogs: breedsData.filter(breed => breed && breed.type === 'dog' && breed.size === 'small').length,
  mediumDogs: breedsData.filter(breed => breed && breed.type === 'dog' && breed.size === 'medium').length,
  largeDogs: breedsData.filter(breed => breed && breed.type === 'dog' && breed.size === 'large').length,
  
  // Razas hipoalerg√©nicas
  hypoallergenic: breedsData.filter(breed => breed && breed.hypoallergenic === true).length,
  
  // Razas por nivel de energ√≠a
  lowEnergy: breedsData.filter(breed => breed && breed.energyLevel && breed.energyLevel <= 2).length,
  highEnergy: breedsData.filter(breed => breed && breed.energyLevel && breed.energyLevel >= 4).length,
  
  // Estado de implementaci√≥n (siempre 100% si tenemos razas v√°lidas)
  implementationProgress: breedsData.length > 0 ? 100 : 0,
  
  // Informaci√≥n de calidad de datos
  dataQuality: {
    withImages: breedsData.filter(breed => breed && breed.image).length,
    withDescriptions: breedsData.filter(breed => breed && breed.description).length,
    complete: breedsData.filter(breed => 
      breed && breed.id && breed.name && breed.type && breed.image && breed.description
    ).length
  }
};

// üìä LOG DE ESTAD√çSTICAS FINALES
console.log('‚úÖ Estad√≠sticas finales de razas:');
console.log(`  üìä Total: ${stats.total} razas`);
console.log(`  üêï Perros: ${stats.dogs}`);
console.log(`  üê± Gatos: ${stats.cats}`);
console.log(`  üè† Hipoalerg√©nicas: ${stats.hypoallergenic}`);
console.log(`  ‚ö° Alta energ√≠a: ${stats.highEnergy}`);
console.log(`  üò¥ Baja energ√≠a: ${stats.lowEnergy}`);
console.log(`  üì∏ Con im√°genes: ${stats.dataQuality.withImages}`);
console.log(`  üìù Con descripciones: ${stats.dataQuality.withDescriptions}`);
console.log(`  ‚úÖ Datos completos: ${stats.dataQuality.complete}`);

// üîç VERIFICACI√ìN DE INTEGRIDAD
const duplicateIds = [];
const seenIds = new Set();

breedsData.forEach(breed => {
  if (breed && breed.id) {
    if (seenIds.has(breed.id)) {
      duplicateIds.push(breed.id);
    } else {
      seenIds.add(breed.id);
    }
  }
});

if (duplicateIds.length > 0) {
  console.warn('‚ö†Ô∏è IDs duplicados encontrados:', duplicateIds);
}

// üöÄ EXPORTACIONES
export { breedsData, stats };
export default breedsData;

// üõ†Ô∏è EXPORTACIONES ADICIONALES PARA DEBUGGING
export const debugInfo = {
  originalArrays: {
    dogsAC: Array.isArray(dogsAC) ? dogsAC.length : 'ERROR',
    dogsDH: Array.isArray(dogsDH) ? dogsDH.length : 'ERROR', 
    dogsIM: Array.isArray(dogsIM) ? dogsIM.length : 'ERROR',
    dogsNZ: Array.isArray(dogsNZ) ? dogsNZ.length : 'ERROR',
    catsALL: Array.isArray(catsALL) ? catsALL.length : 'ERROR'
  },
  validationStats: {
    totalProcessed: (dogsAC?.length || 0) + (dogsDH?.length || 0) + (dogsIM?.length || 0) + (dogsNZ?.length || 0) + (catsALL?.length || 0),
    totalValid: breedsData.length,
    duplicateIds
  }
};

// üìö FUNCIONES DE UTILIDAD PARA COMPONENTES
export const getBreedsByType = (type) => {
  return breedsData.filter(breed => breed && breed.type === type);
};

export const getBreedsBySize = (size) => {
  return breedsData.filter(breed => breed && breed.size === size);
};

export const getBreedById = (id) => {
  return breedsData.find(breed => breed && breed.id === id);
};

export const searchBreeds = (query) => {
  if (!query || typeof query !== 'string') return [];
  
  const searchTerm = query.toLowerCase().trim();
  return breedsData.filter(breed => 
    breed && 
    breed.name && 
    (breed.name.toLowerCase().includes(searchTerm) ||
     (breed.description && breed.description.toLowerCase().includes(searchTerm)))
  );
};