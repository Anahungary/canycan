---
// src/components/home/HeroBannerCarousel.astro
import { Image } from 'astro:assets';
import Button from '../ui/Button.astro';
import Badge from '../ui/Badge.astro';

interface BannerItem {
  id: string;
  title: string;
  subtitle: string;
  image: string;
  category?: string;
  badges?: string[];
  url: string;
}

interface Props {
  items: BannerItem[];
  height?: 'small' | 'medium' | 'large';
  autoplay?: boolean;
  interval?: number;
}

const {
  items,
  height = 'medium',
  autoplay = true,
  interval = 5000
} = Astro.props;

// Mapeo de alturas
const heightClasses = {
  small: 'h-[400px]',
  medium: 'h-[500px]',
  large: 'h-[600px]',
};

const carouselId = `hero-carousel-${Math.random().toString(36).substring(2, 15)}`;
---

<div class={`relative ${heightClasses[height]} w-full overflow-hidden rounded-xl`} id={carouselId}>
  {/* Slides */}
  <div class="carousel-slides h-full w-full relative">
    {items.map((item, index) => (
      <div class={`carousel-slide absolute inset-0 transition-opacity duration-700 ${index === 0 ? 'opacity-100' : 'opacity-0'}`} data-index={index}>
        {/* Imagen de fondo */}
        <div class="absolute inset-0 w-full h-full">
          <Image
            src={item.image}
            alt={item.title}
            width={1920}
            height={1080}
            class="w-full h-full object-cover"
          />
          <div class="absolute inset-0 bg-gradient-to-r from-black/60 to-transparent"></div>
        </div>
        
        {/* Contenido */}
        <div class="flex flex-col justify-center h-full z-10 p-8 md:p-12 lg:p-16 max-w-2xl relative">
          {/* Badges y categoría */}
          <div class="mb-4 flex flex-wrap gap-2">
            {item.category && (
              <Badge variant="primary" size="md" class="uppercase font-bold">
                {item.category}
              </Badge>
            )}
            {item.badges && item.badges.map(badge => (
              <Badge variant="secondary" size="md">
                {badge}
              </Badge>
            ))}
          </div>
          
          {/* Título y subtítulo */}
          <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold text-white mb-4 drop-shadow-md">
            {item.title}
          </h2>
          <p class="text-lg md:text-xl text-white mb-8 max-w-2xl drop-shadow-md">
            {item.subtitle}
          </p>
          
          {/* CTA */}
          <div>
            <Button 
              href={item.url}
              variant="primary" 
              size="lg"
              class="bg-white text-[#2E2E2E] hover:bg-gray-100 border border-white font-medium shadow-md"
            >
              Leer artículo
            </Button>
          </div>
        </div>
      </div>
    ))}
  </div>
  
  {/* Controles */}
  <div class="absolute bottom-5 right-5 flex space-x-2 z-20">
    <button class="carousel-prev p-2 rounded-full bg-black/30 text-white hover:bg-black/50 transition-colors">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
      </svg>
    </button>
    <button class="carousel-next p-2 rounded-full bg-black/30 text-white hover:bg-black/50 transition-colors">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
      </svg>
    </button>
  </div>
  
  {/* Indicadores */}
  <div class="absolute bottom-5 left-0 right-0 flex justify-center z-20">
    <div class="flex space-x-2">
      {items.map((_, index) => (
        <button 
          class={`carousel-indicator w-3 h-3 rounded-full transition-colors ${index === 0 ? 'bg-white' : 'bg-white/50 hover:bg-white/80'}`}
          data-index={index}
        ></button>
      ))}
    </div>
  </div>
</div>

<script define:vars={{ carouselId, autoplay, interval }}>
  // Esperar a que el DOM esté cargado
  document.addEventListener('DOMContentLoaded', () => {
    const carousel = document.getElementById(carouselId);
    if (!carousel) return;
    
    const slides = carousel.querySelectorAll('.carousel-slide');
    const indicators = carousel.querySelectorAll('.carousel-indicator');
    const prevButton = carousel.querySelector('.carousel-prev');
    const nextButton = carousel.querySelector('.carousel-next');
    
    let currentIndex = 0;
    let intervalId = null;
    
    // Función para mostrar un slide específico
    const showSlide = (index) => {
      // Ocultar todos los slides
      slides.forEach(slide => {
        slide.classList.remove('opacity-100');
        slide.classList.add('opacity-0');
      });
      
      // Mostrar el slide actual
      slides[index].classList.remove('opacity-0');
      slides[index].classList.add('opacity-100');
      
      // Actualizar indicadores
      indicators.forEach((indicator, i) => {
        if (i === index) {
          indicator.classList.remove('bg-white/50');
          indicator.classList.add('bg-white');
        } else {
          indicator.classList.remove('bg-white');
          indicator.classList.add('bg-white/50');
        }
      });
      
      currentIndex = index;
    };
    
    // Función para ir al siguiente slide
    const nextSlide = () => {
      const newIndex = (currentIndex + 1) % slides.length;
      showSlide(newIndex);
    };
    
    // Función para ir al slide anterior
    const prevSlide = () => {
      const newIndex = (currentIndex - 1 + slides.length) % slides.length;
      showSlide(newIndex);
    };
    
    // Iniciar autoplay si está habilitado
    if (autoplay && slides.length > 1) {
      intervalId = setInterval(nextSlide, interval);
    }
    
    // Event listeners para botones
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        prevSlide();
        
        // Reiniciar intervalo si autoplay está habilitado
        if (autoplay && intervalId) {
          clearInterval(intervalId);
          intervalId = setInterval(nextSlide, interval);
        }
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', () => {
        nextSlide();
        
        // Reiniciar intervalo si autoplay está habilitado
        if (autoplay && intervalId) {
          clearInterval(intervalId);
          intervalId = setInterval(nextSlide, interval);
        }
      });
    }
    
    // Event listeners para indicadores
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        showSlide(index);
        
        // Reiniciar intervalo si autoplay está habilitado
        if (autoplay && intervalId) {
          clearInterval(intervalId);
          intervalId = setInterval(nextSlide, interval);
        }
      });
    });
    
    // Pausar autoplay al pasar el mouse por encima
    carousel.addEventListener('mouseenter', () => {
      if (autoplay && intervalId) {
        clearInterval(intervalId);
      }
    });
    
    // Reanudar autoplay al quitar el mouse
    carousel.addEventListener('mouseleave', () => {
      if (autoplay && slides.length > 1) {
        clearInterval(intervalId);
        intervalId = setInterval(nextSlide, interval);
      }
    });
    
    // Limpiar intervalo al desmontar componente
    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  });
</script>