---
// Newsletter.astro - Componente para suscripción a newsletter
---

<div class="newsletter-form">
  <form id="newsletter-form" class="space-y-3">
    <div>
      <label for="email" class="sr-only">Correo electrónico</label>
      <input
        type="email"
        id="email"
        name="email"
        required
        placeholder="Tu correo electrónico"
        class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#AFC2D5] focus:border-transparent"
      />
    </div>
    <div class="flex">
      <label class="flex items-start">
        <input 
          type="checkbox" 
          name="accept-terms" 
          required
          class="h-4 w-4 mt-1 rounded border-gray-300 text-[#AFC2D5] focus:ring-[#AFC2D5]" 
        />
        <span class="ml-2 text-xs text-gray-500">
          Acepto recibir correos y la política de privacidad
        </span>
      </label>
    </div>
    <button
      type="submit"
      class="w-full bg-[#AFC2D5] hover:bg-[#9DB3C6] text-white py-2 px-4 rounded-md text-sm font-medium transition-colors duration-200"
    >
      Suscribirme
    </button>
  </form>
  <div id="newsletter-success" class="hidden mt-3 text-sm text-green-600">
    ¡Gracias por suscribirte! Pronto recibirás nuestras actualizaciones.
  </div>
  <div id="newsletter-error" class="hidden mt-3 text-sm text-red-600">
    Ocurrió un error. Por favor intenta nuevamente.
  </div>
</div>

<script>
  // Script para manejar la suscripción al newsletter
  const form = document.getElementById('newsletter-form');
  const successMessage = document.getElementById('newsletter-success');
  const errorMessage = document.getElementById('newsletter-error');

  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Aquí iría la lógica para enviar los datos a una API o servicio
      // Por ahora solo simularemos éxito:
      
      try {
        // Simulación de envío (reemplazar con llamada real a API)
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Mostrar mensaje de éxito
        if (successMessage) successMessage.classList.remove('hidden');
        if (errorMessage) errorMessage.classList.add('hidden');
        
        // Limpiar formulario
        form.reset();
        
        // Ocultar mensaje después de 5 segundos
        setTimeout(() => {
          if (successMessage) successMessage.classList.add('hidden');
        }, 5000);
        
      } catch (error) {
        // Mostrar mensaje de error
        if (errorMessage) errorMessage.classList.remove('hidden');
        if (successMessage) successMessage.classList.add('hidden');
        
        // Ocultar mensaje después de 5 segundos
        setTimeout(() => {
          if (errorMessage) errorMessage.classList.add('hidden');
        }, 5000);
      }
    });
  }
</script>