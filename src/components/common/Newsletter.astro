---
// src/components/common/Newsletter.astro - VERSI√ìN CORREGIDA

import AddSentNewsletter from '../marketing/AddSentNewsletter.jsx';

interface Props {
  source?: string;
  title?: string;
  description?: string;
  variant?: 'default' | 'homepage' | 'footer';
}

const { 
  source = 'general',
  title = 'Suscr√≠bete al newsletter',
  description = 'Recibe consejos exclusivos, art√≠culos y novedades sobre el cuidado de mascotas directamente en tu correo.',
  variant = 'default'
} = Astro.props;

const newsletterId = `newsletter-${Math.random().toString(36).substring(2, 15)}`;

// Configurar t√≠tulos y descripciones por variant
const variantConfig = {
  default: {
    title: title || 'Suscr√≠bete al newsletter',
    description: description
  },
  homepage: {
    title: title || 'Mantente al d√≠a con Balto',
    description: description || 'Recibe las √∫ltimas noticias, gu√≠as exclusivas y consejos de expertos directamente en tu inbox.'
  },
  footer: {
    title: title || 'Newsletter',
    description: description || 'Consejos semanales para tu mascota'
  }
};

const config = variantConfig[variant];
---

<!-- VARIANT: DEFAULT (Gradiente verde para sidebars) -->
{variant === 'default' && (
  <div class="relative bg-gradient-to-br from-green-500 via-green-600 to-emerald-600 rounded-2xl p-8 text-white overflow-hidden shadow-xl">
    {/* Decoraciones de fondo */}
    <div class="absolute inset-0 opacity-20">
      <div class="absolute -top-4 -right-4 w-20 h-20 bg-white rounded-full blur-xl"></div>
      <div class="absolute -bottom-4 -left-4 w-24 h-24 bg-yellow-300 rounded-full blur-lg"></div>
    </div>
    
    <div class="relative z-10">
      <div class="flex items-center gap-3 mb-4">
        <div class="w-20 backdrop-blur-sm rounded-full flex items-center justify-center">
          <img src="/images/perro2.svg" alt="Newsletter" class="w-30" />
        </div>
        <h3 class="text-xl font-bold">{config.title}</h3>
      </div>
      
      <p class="text-white/90 mb-6 leading-relaxed">
        {config.description}
      </p>
      
      <form id={newsletterId} class="newsletter-form space-y-4" data-source={source}>
        <div>
          <input
            type="text"
            name="name"
            placeholder="Tu nombre"
            class="w-full px-5 py-4 text-gray-900 bg-white/95 backdrop-blur-sm border border-white/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-white focus:bg-white transition-all duration-300 placeholder-gray-500"
          />
        </div>
        <div>
          <input
            type="email"
            name="email"
            placeholder="tu@email.com"
            class="w-full px-5 py-4 text-gray-900 bg-white/95 backdrop-blur-sm border border-white/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-white focus:bg-white transition-all duration-300 placeholder-gray-500"
            required
          />
        </div>
        
        <div class="flex items-start">
          <input 
            type="checkbox" 
            id={`newsletter-terms-${newsletterId}`}
            name="accept-terms"
            required
            class="mt-1 h-4 w-4 rounded border-white/30 text-green-600 focus:ring-white bg-white/20" 
          />
          <label for={`newsletter-terms-${newsletterId}`} class="ml-3 text-sm text-white/90 leading-relaxed">
            Acepto recibir correos y la <a href="/privacidad" class="underline hover:text-yellow-300">pol√≠tica de privacidad</a>
          </label>
        </div>
        
        <button
          type="submit"
          class="w-full bg-white text-green-600 hover:text-green-700 py-4 px-6 rounded-xl text-sm font-bold transition-all duration-300 hover:bg-gray-50 shadow-lg hover:shadow-xl hover:scale-105 flex items-center justify-center gap-2"
        >
          <span class="button-text">üöÄ Suscribirme gratis</span>
          <span class="loading-text hidden">Enviando...</span>
        </button>
        
        {/* Mensaje de respuesta */}
        <div class="message-container mt-3 hidden">
          <div class="success-message hidden p-3 bg-green-100 border border-green-300 text-green-800 rounded-md text-sm">
            ‚úÖ ¬°Suscripci√≥n exitosa! Revisa tu email para confirmar.
          </div>
          <div class="error-message hidden p-3 bg-red-100 border border-red-300 text-red-800 rounded-md text-sm">
            ‚ùå <span class="error-text">Error al suscribirse. Int√©ntalo de nuevo.</span>
          </div>
        </div>
      </form>
    </div>
  </div>
)}

<!-- VARIANT: HOMEPAGE (Dise√±o amarillo sutil) -->
{variant === 'homepage' && (
  <div class="bg-white rounded-2xl border border-yellow-200 p-8 shadow-sm">
    <div class="text-center mb-6">
      <h3 class="text-2xl font-bold text-gray-900 mb-2">{config.title}</h3>
      <p class="text-gray-600">{config.description}</p>
    </div>
    
    <form id={newsletterId} class="newsletter-form" data-source={source}>
      <div class="flex flex-col gap-4 mb-4">
        <div>
          <input
            type="text"
            name="name"
            placeholder="Tu nombre (opcional)"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 transition-all duration-200"
          />
        </div>
        <div class="flex flex-col sm:flex-row gap-4">
          <div class="flex-1">
            <input
              type="email"
              name="email"
              placeholder="tu@email.com"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 transition-all duration-200"
              required
            />
          </div>
          <button
            type="submit"
            class="px-8 py-3 bg-yellow-500 hover:bg-yellow-600 text-white font-bold rounded-lg transition-all duration-200 shadow-md hover:shadow-lg flex items-center justify-center gap-2"
          >
            <span class="button-text">Suscribirme</span>
            <span class="loading-text hidden">Enviando...</span>
          </button>
        </div>
      </div>
      
      <div class="flex items-start justify-center">
        <input 
          type="checkbox" 
          id={`newsletter-terms-${newsletterId}`}
          name="accept-terms"
          required
          class="mt-1 h-4 w-4 rounded border-gray-300 text-yellow-500 focus:ring-yellow-500" 
        />
        <label for={`newsletter-terms-${newsletterId}`} class="ml-3 text-sm text-gray-600">
          Acepto recibir correos y la <a href="/privacidad" class="text-yellow-600 hover:text-yellow-700 underline">pol√≠tica de privacidad</a>
        </label>
      </div>
      
      {/* Mensaje de respuesta */}
      <div class="message-container mt-4 hidden">
        <div class="success-message hidden p-3 bg-green-100 border border-green-300 text-green-800 rounded-lg text-sm">
          ‚úÖ ¬°Suscripci√≥n exitosa! Revisa tu email para confirmar.
        </div>
        <div class="error-message hidden p-3 bg-red-100 border border-red-300 text-red-800 rounded-lg text-sm">
          ‚ùå <span class="error-text">Error al suscribirse. Int√©ntalo de nuevo.</span>
        </div>
      </div>
    </form>
  </div>
)}

<!-- VARIANT: FOOTER (Dise√±o minimalista) -->
{variant === 'footer' && (
  <div class="bg-gray-50 rounded-lg p-6 border border-gray-200">
    <div class="mb-4">
      <h4 class="text-lg font-bold text-gray-900 mb-1">{config.title}</h4>
      <p class="text-sm text-gray-600">{config.description}</p>
    </div>
         
    <form id={newsletterId} class="newsletter-form" data-source={source}>
      <div class="space-y-3 mb-3">
        <input
          type="email"
          name="email"
          placeholder="Email"
          class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-gray-400 focus:border-gray-400"
          required
        />
        <button
          type="submit"
          class="w-full px-4 py-2 bg-gray-800 hover:bg-gray-900 text-white text-sm font-medium rounded-md transition-colors duration-200"
        >
          <span class="button-text">Enviar</span>
          <span class="loading-text hidden">...</span>
        </button>
      </div>
             
      <div class="flex items-start">
        <input 
          type="checkbox"
          id={`newsletter-terms-${newsletterId}`}
          name="accept-terms"
          required
          class="mt-0.5 h-3 w-3 rounded border-gray-300 text-gray-600 focus:ring-gray-500"
         />
        <label for={`newsletter-terms-${newsletterId}`} class="ml-2 text-xs text-gray-500">
          Acepto la <a href="/privacidad" class="text-gray-700 hover:text-gray-900 underline">pol√≠tica de privacidad</a>
        </label>
      </div>
             
      {/* Mensaje de respuesta */}
      <div class="message-container mt-3 hidden">
        <div class="success-message hidden p-2 bg-green-100 border border-green-300 text-green-800 rounded text-xs">
          ‚úÖ ¬°Suscripci√≥n exitosa!
        </div>
        <div class="error-message hidden p-2 bg-red-100 border border-red-300 text-red-800 rounded text-xs">
          ‚ùå <span class="error-text">Error al suscribirse.</span>
        </div>
      </div>
    </form>
  </div>
)}

<script>
  // Funcionalidad del newsletter
  document.addEventListener('DOMContentLoaded', function() {
    const forms = document.querySelectorAll('.newsletter-form');
    
    forms.forEach(form => {
      if (!(form instanceof HTMLFormElement)) return;
      
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const button = form.querySelector('button[type="submit"]') as HTMLButtonElement;
        const buttonText = button?.querySelector('.button-text') as HTMLElement;
        const loadingText = button?.querySelector('.loading-text') as HTMLElement;
        const messageContainer = form.querySelector('.message-container') as HTMLElement;
        const successMessage = form.querySelector('.success-message') as HTMLElement;
        const errorMessage = form.querySelector('.error-message') as HTMLElement;
        const errorText = form.querySelector('.error-text') as HTMLElement;
        
        // Validar que los elementos existen
        if (!button || !buttonText || !loadingText || !messageContainer || !successMessage || !errorMessage || !errorText) {
          console.error('Elementos del newsletter no encontrados');
          return;
        }
        
        // Mostrar loading
        buttonText.classList.add('hidden');
        loadingText.classList.remove('hidden');
        button.disabled = true;
        
        try {
          const formData = new FormData(form);
          const formElement = form as HTMLFormElement;
          const email = formData.get('email') as string;
          const name = formData.get('name') as string;
          const acceptTerms = formData.get('accept-terms') === 'on';
          const source = formElement.dataset.source || 'general';
          
          // Validar email
          if (!email || !email.includes('@')) {
            throw new Error('Email inv√°lido');
          }
          
          if (!acceptTerms) {
            throw new Error('Debes aceptar los t√©rminos y condiciones');
          }
          
          console.log('üìß Enviando suscripci√≥n:', { email, name, source });
          
          // üîß USAR EL ENDPOINT CORRECTO PARA NEWSLETTER
          const response = await fetch('/api/newsletter', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email: email,
              name: name || 'Suscriptor Newsletter',
              source: source
            })
          });
          
          console.log('üìß Response status:', response.status);
          
          if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            console.error('‚ùå Error de API:', errorData);
            throw new Error(errorData.message || `Error del servidor: ${response.status}`);
          }
          
          const result = await response.json();
          console.log('‚úÖ √âxito:', result);
          
          // Mostrar mensaje de √©xito
          messageContainer.classList.remove('hidden');
          successMessage.classList.remove('hidden');
          errorMessage.classList.add('hidden');
          
          // Limpiar formulario
          form.reset();
          
        } catch (error) {
          console.error('‚ùå Error al suscribirse:', error);
          
          // Mostrar mensaje de error espec√≠fico
          const errorMessageText = error instanceof Error ? error.message : 'Error al procesar la suscripci√≥n';
          errorText.textContent = errorMessageText;
          
          messageContainer.classList.remove('hidden');
          errorMessage.classList.remove('hidden');
          successMessage.classList.add('hidden');
        } finally {
          // Restaurar bot√≥n
          buttonText.classList.remove('hidden');
          loadingText.classList.add('hidden');
          button.disabled = false;
        }
      });
    });
  });
</script>