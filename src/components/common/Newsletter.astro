---
// src/components/common/Newsletter.astro - Con dise√±o visual completo
interface Props {
  source?: string;
  title?: string;
  description?: string;
}

const { 
  source = 'general',
  title = 'Suscr√≠bete al newsletter',
  description = 'Recibe consejos exclusivos, art√≠culos y novedades sobre el cuidado de mascotas directamente en tu correo.'
} = Astro.props;

const newsletterId = `newsletter-${Math.random().toString(36).substring(2, 15)}`;
---

{/* Newsletter con dise√±o visual completo */}
<div class="relative bg-gradient-to-br from-green-500 via-green-600 to-emerald-600 rounded-2xl p-8 text-white overflow-hidden shadow-xl">
  {/* Decoraciones de fondo */}
  <div class="absolute inset-0 opacity-20">
    <div class="absolute -top-4 -right-4 w-20 h-20 bg-white rounded-full blur-xl"></div>
    <div class="absolute -bottom-4 -left-4 w-24 h-24 bg-yellow-300 rounded-full blur-lg"></div>
  </div>
  
  <div class="relative z-10">
    <div class="flex items-center gap-3 mb-4">
      <div class="w-20 backdrop-blur-sm rounded-full flex items-center justify-center">
        {/* üîß ICONO SVG PERSONALIZADO DE PERRO2 */}
        <img src="/images/perro2.svg" alt="Newsletter" class="w-30" />
      </div>
      <h3 class="text-xl font-bold">{title}</h3>
    </div>
    
    <p class="text-white/90 mb-6 leading-relaxed">
      {description}
    </p>
    
    <form id={newsletterId} class="newsletter-form space-y-4" data-source={source}>
      <div>
        <input
          type="email"
          name="email"
          placeholder="tu@email.com"
          class="w-full px-5 py-4 text-gray-900 bg-white/95 backdrop-blur-sm border border-white/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-white focus:bg-white transition-all duration-300 placeholder-gray-500"
          required
        />
      </div>
      
      <div class="flex items-start">
        <input 
          type="checkbox" 
          id={`newsletter-terms-${newsletterId}`}
          name="accept-terms"
          required
          class="mt-1 h-4 w-4 rounded border-white/30 text-green-600 focus:ring-white bg-white/20" 
        />
        <label for={`newsletter-terms-${newsletterId}`} class="ml-3 text-sm text-white/90 leading-relaxed">
          Acepto recibir correos y la <a href="/privacidad" class="underline hover:text-yellow-300">pol√≠tica de privacidad</a>
        </label>
      </div>
      
      <button
        type="submit"
        class="w-full bg-white text-green-600 hover:text-green-700 py-4 px-6 rounded-xl text-sm font-bold transition-all duration-300 hover:bg-gray-50 shadow-lg hover:shadow-xl hover:scale-105 flex items-center justify-center gap-2"
      >
        {/* üîß ICONO SVG PERSONALIZADO EN EL BOT√ìN */}
        
        <span class="button-text">üöÄ Suscribirme gratis</span>
        <span class="loading-text hidden">Enviando...</span>
      </button>
      
      {/* Mensaje de respuesta */}
      <div class="message-container mt-3 hidden">
        <div class="success-message hidden p-3 bg-green-100 border border-green-300 text-green-800 rounded-md text-sm">
          ‚úÖ ¬°Suscripci√≥n exitosa! Revisa tu email para confirmar.
        </div>
        <div class="error-message hidden p-3 bg-red-100 border border-red-300 text-red-800 rounded-md text-sm">
          ‚ùå Error al suscribirse. Int√©ntalo de nuevo.
        </div>
      </div>
    </form>
  </div>
</div>

<script>
  // Funcionalidad del newsletter
  document.addEventListener('DOMContentLoaded', function() {
    const forms = document.querySelectorAll('.newsletter-form');
    
    forms.forEach(form => {
      if (!(form instanceof HTMLFormElement)) return;
      
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const button = form.querySelector('button[type="submit"]') as HTMLButtonElement;
        const buttonText = button?.querySelector('.button-text') as HTMLElement;
        const loadingText = button?.querySelector('.loading-text') as HTMLElement;
        const messageContainer = form.querySelector('.message-container') as HTMLElement;
        const successMessage = form.querySelector('.success-message') as HTMLElement;
        const errorMessage = form.querySelector('.error-message') as HTMLElement;
        
        // Validar que los elementos existen
        if (!button || !buttonText || !loadingText || !messageContainer || !successMessage || !errorMessage) {
          console.error('Elementos del newsletter no encontrados');
          return;
        }
        
        // Mostrar loading
        buttonText.classList.add('hidden');
        loadingText.classList.remove('hidden');
        button.disabled = true;
        
        try {
          const formData = new FormData(form);
          const formElement = form as HTMLFormElement;
          const data = {
            email: formData.get('email'),
            source: formElement.dataset.source || 'general',
            acceptTerms: formData.get('accept-terms') === 'on'
          };
          
          // Aqu√≠ puedes conectar con tu API (Airtable, etc.)
          // const response = await fetch('/api/newsletter', {
          //   method: 'POST',
          //   headers: { 'Content-Type': 'application/json' },
          //   body: JSON.stringify(data)
          // });
          
          // Simulaci√≥n de √©xito para demo
          await new Promise(resolve => setTimeout(resolve, 1500));
          
          // Mostrar mensaje de √©xito
          messageContainer.classList.remove('hidden');
          successMessage.classList.remove('hidden');
          errorMessage.classList.add('hidden');
          
          // Limpiar formulario
          form.reset();
          
        } catch (error) {
          console.error('Error al suscribirse:', error);
          
          // Mostrar mensaje de error
          messageContainer.classList.remove('hidden');
          errorMessage.classList.remove('hidden');
          successMessage.classList.add('hidden');
        } finally {
          // Restaurar bot√≥n
          buttonText.classList.remove('hidden');
          loadingText.classList.add('hidden');
          button.disabled = false;
        }
      });
    });
  });
</script>