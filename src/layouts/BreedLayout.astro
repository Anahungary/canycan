---
// BreedLayout.astro - VERSI√ìN CORREGIDA PARA WHATSAPP
import BaseLayout from './BaseLayout.astro';
import Container from '../components/ui/Container.astro';
import Button from '../components/ui/Button.astro';
import ShareButtons from '../components/blog/ShareButtons.astro';
import { Image } from 'astro:assets';

interface Props {
  breed: {
    id: string;
    name: string;
    type: 'dog' | 'cat';
    image?: string;
    images?: string[];
    description?: string;
    size?: string;
    temperament?: string[];
    origin?: string;
    lifeSpan?: string;
    weight?: string;
    height?: string;
    hypoallergenic?: boolean;
    energyLevel?: number;
    groomingNeeds?: number;
    trainability?: number;
    goodWithKids?: boolean;
    goodWithPets?: boolean;
    suitableForApartments?: boolean;
  };
}

const { breed } = Astro.props;

// üîß VALIDACI√ìN DE DATOS DE LA RAZA
if (!breed || !breed.name) {
  throw new Error('Datos de raza inv√°lidos o faltantes');
}

// üîß GENERAR IMAGEN OPTIMIZADA PARA WHATSAPP
const generateBreedOgImage = (breedData: any): string => {
  const siteUrl = import.meta.env.SITE || 'https://canicat.netlify.app';
  
  // 1. Si tiene imagen espec√≠fica de la raza, usarla
  if (breedData.image && !breedData.image.includes('placeholder')) {
    return breedData.image.startsWith('http') 
      ? breedData.image 
      : `${siteUrl}${breedData.image}`;
  }
  
  // 2. Si tiene array de im√°genes, usar la primera
  if (breedData.images && breedData.images.length > 0) {
    const firstImage = breedData.images[0];
    return firstImage.startsWith('http') 
      ? firstImage 
      : `${siteUrl}${firstImage}`;
  }
  
  // 3. Fallback a imagen gen√©rica seg√∫n tipo
  const fallbackImage = breedData.type === 'cat' 
    ? '/images/og/cat-default.jpg' 
    : '/images/og/dog-default.jpg';
    
  return `${siteUrl}${fallbackImage}`;
};

// üîß GENERAR DESCRIPCI√ìN OPTIMIZADA
const generateOptimizedDescription = (breedData: any): string => {
  const baseName = breedData.name || 'Raza de mascota';
  const type = breedData.type === 'cat' ? 'gato' : 'perro';
  
  let description = `Conoce todo sobre la raza ${baseName} - caracter√≠sticas, temperamento, cuidados y m√°s. `;
  
  if (breedData.temperament && breedData.temperament.length > 0) {
    description += `Temperamento: ${breedData.temperament.slice(0, 3).join(', ')}. `;
  }
  
  if (breedData.origin) {
    description += `Origen: ${breedData.origin}. `;
  }
  
  if (breedData.size) {
    description += `Tama√±o: ${breedData.size}. `;
  }
  
  description += `Gu√≠a completa en Kaj√∫.`;
  
  // Truncar a 160 caracteres para WhatsApp
  return description.length > 160 ? `${description.substring(0, 157)}...` : description;
};

// üîß GENERAR T√çTULO OPTIMIZADO
const generateOptimizedTitle = (breedData: any): string => {
  const baseName = breedData.name || 'Raza desconocida';
  const type = breedData.type === 'cat' ? 'Gato' : 'Perro';
  
  let title = `${baseName} - ${type}`;
  
  if (breedData.size) {
    title += ` ${breedData.size}`;
  }
  
  if (breedData.origin) {
    title += ` de ${breedData.origin}`;
  }
  
  // Truncar a 60 caracteres para mejor visualizaci√≥n
  return title.length > 60 ? `${title.substring(0, 57)}...` : title;
};

// üîß DATOS OPTIMIZADOS PARA META TAGS
const optimizedTitle = generateOptimizedTitle(breed);
const optimizedDescription = generateOptimizedDescription(breed);
const optimizedImage = generateBreedOgImage(breed);

// üîß DETERMINAR CARACTER√çSTICAS DESTACADAS
const getHighlightedTraits = (breedData: any): string[] => {
  const traits = [];
  
  if (breedData.hypoallergenic) traits.push('Hipoalerg√©nico');
  if (breedData.goodWithKids) traits.push('Bueno con ni√±os');
  if (breedData.goodWithPets) traits.push('Sociable con mascotas');
  if (breedData.suitableForApartments) traits.push('Apto para apartamentos');
  
  // Niveles de energ√≠a
  if (breedData.energyLevel >= 4) traits.push('Alta energ√≠a');
  else if (breedData.energyLevel <= 2) traits.push('Tranquilo');
  
  // Facilidad de entrenamiento
  if (breedData.trainability >= 4) traits.push('F√°cil de entrenar');
  
  return traits.slice(0, 4); // M√°ximo 4 caracter√≠sticas
};

const highlightedTraits = getHighlightedTraits(breed);

// üîß URL CANONICAL
const canonicalUrl = `/razas/${breed.id}`;
---

<BaseLayout 
  title={optimizedTitle}
  description={optimizedDescription}
  ogImage={optimizedImage}
  canonicalUrl={canonicalUrl}
  ogImageWidth={1200}
  ogImageHeight={630}
  ogImageType="image/jpeg"
>
  <!-- üîß META TAGS ADICIONALES ESPEC√çFICOS PARA RAZAS -->
  <Fragment slot="head">
    <!-- Meta tags espec√≠ficos para razas -->
    <meta property="og:type" content="article" />
    <meta property="article:section" content="Razas" />
    <meta property="article:tag" content={breed.type === 'cat' ? 'Gatos' : 'Perros'} />
    {breed.origin && <meta property="article:tag" content={breed.origin} />}
    {breed.size && <meta property="article:tag" content={breed.size} />}
    
    <!-- JSON-LD espec√≠fico para razas -->
    <script type="application/ld+json" is:inline>
    {
      "@context": "https://schema.org",
      "@type": "Article",
      "headline": "{optimizedTitle}",
      "description": "{optimizedDescription}",
      "image": "{optimizedImage}",
      "author": {
        "@type": "Organization",
        "name": "Kaj√∫"
      },
      "publisher": {
        "@type": "Organization",
        "name": "Kaj√∫",
        "logo": {
          "@type": "ImageObject",
          "url": "{import.meta.env.SITE || 'https://canicat.netlify.app'}/logo.png"
        }
      },
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "{import.meta.env.SITE || 'https://canicat.netlify.app'}{canonicalUrl}"
      },
      "about": {
        "@type": "Animal",
        "name": "{breed.name}",
        "species": "{breed.type === 'cat' ? 'Felis catus' : 'Canis lupus familiaris'}"
      }
    }
    </script>
  </Fragment>

  <!-- Hero Section con imagen optimizada -->
  <section class="relative bg-gradient-to-b from-gray-50 to-white py-12 md:py-16 overflow-hidden">
    <Container>
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12 items-center">
        <!-- Informaci√≥n de la raza -->
        <div class="order-2 lg:order-1">
          <!-- Breadcrumb -->
          <nav class="text-sm mb-4">
            <a href="/" class="text-gray-500 hover:text-gray-700">Inicio</a>
            <span class="mx-2 text-gray-400">‚Ä∫</span>
            <a href="/razas" class="text-gray-500 hover:text-gray-700">Razas</a>
            <span class="mx-2 text-gray-400">‚Ä∫</span>
            <span class="text-gray-900">{breed.name}</span>
          </nav>
          
          <!-- T√≠tulo y tipo -->
          <div class="mb-6">
            <div class="flex items-center gap-3 mb-3">
              <span class="px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full">
                {breed.type === 'cat' ? 'üê± Gato' : 'üêï Perro'}
              </span>
              {breed.origin && (
                <span class="px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full">
                  üìç {breed.origin}
                </span>
              )}
            </div>
            
            <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
              {breed.name}
            </h1>
            
            {breed.description && (
              <p class="text-lg text-gray-600 leading-relaxed mb-6">
                {breed.description}
              </p>
            )}
          </div>
          
          <!-- Caracter√≠sticas destacadas -->
          {highlightedTraits.length > 0 && (
            <div class="mb-8">
              <h3 class="text-sm font-semibold text-gray-900 mb-3 uppercase tracking-wide">
                Caracter√≠sticas destacadas
              </h3>
              <div class="flex flex-wrap gap-2">
                {highlightedTraits.map(trait => (
                  <span class="px-3 py-1 bg-green-100 text-green-800 text-sm font-medium rounded-full">
                    ‚úì {trait}
                  </span>
                ))}
              </div>
            </div>
          )}
          
          <!-- Botones de acci√≥n -->
          <div class="flex flex-col sm:flex-row gap-4">
            <Button href="#caracteristicas" variant="primary" size="lg" class="bg-green-500 text-white">
              Ver caracter√≠sticas completas
            </Button>
            <ShareButtons 
              url={Astro.url.pathname} 
              title={optimizedTitle}
              showLabel={false}
            />
          </div>
        </div>
        
        <!-- Imagen principal optimizada -->
        <div class="order-1 lg:order-2">
          <div class="relative rounded-2xl overflow-hidden shadow-2xl bg-gradient-to-br from-gray-100 to-gray-200">
            {breed.image || (breed.images && breed.images[0]) ? (
              <Image
                src={breed.image || breed.images![0]}
                alt={`${breed.name} - Caracter√≠sticas y informaci√≥n`}
                width={600}
                height={400}
                class="w-full h-auto object-cover"
                loading="eager"
                format="webp"
              />
            ) : (
              <div class="w-full h-96 flex items-center justify-center text-gray-400">
                <div class="text-center">
                  <span class="text-6xl mb-4 block">
                    {breed.type === 'cat' ? 'üê±' : 'üêï'}
                  </span>
                  <p class="text-lg">Imagen no disponible</p>
                </div>
              </div>
            )}
            
            {/* Overlay con informaci√≥n r√°pida */}
            <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-6">
              <div class="text-white">
                {breed.size && (
                  <p class="text-sm opacity-90">Tama√±o: {breed.size}</p>
                )}
                {breed.lifeSpan && (
                  <p class="text-sm opacity-90">Esperanza de vida: {breed.lifeSpan}</p>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </Container>
  </section>
  
  <!-- Contenido principal con acorde√≥n -->
  <section id="caracteristicas" class="py-16 bg-white">
    <Container>
      <div class="max-w-4xl mx-auto">
        <!-- Contenido markdown con acorde√≥n -->
        <div id="accordion-content" class="accordion-content prose prose-lg max-w-none">
          <slot />
        </div>
      </div>
    </Container>
  </section>
  
  <!-- CTA final -->
  <section class="py-16 ">
    <Container>
      <div class="text-center">
        <div class={`${breed.type === 'cat' 
          ? 'bg-gradient-to-r from-green-500 to-green-700' 
          : 'bg-gradient-to-r from-blue-500 to-blue-700'} rounded-xl p-8 text-white`}>
          <h2 class="text-2xl font-bold mb-4">¬øTe gusta esta raza?</h2>
          <p class="mb-6 text-white opacity-90">Comp√°rala con otras razas para encontrar tu mascota ideal</p>
          <Button 
            href="/razas" 
            variant="secondary"
            class="bg-white text-gray-900 hover:bg-gray-100 font-semibold px-8 py-3"
          >
            Comparar razas
          </Button>
        </div>
      </div>
    </Container>
  </section>
</BaseLayout>

<!-- Estilos del acorde√≥n (mantenidos del original) -->
<style>
  .accordion-content {
    max-width: none;
  }

  .accordion-content :global(h1) {
    @apply bg-gradient-to-r from-amber-100 to-yellow-100 border-l-8 border-amber-500 rounded-2xl p-8 mb-8 shadow-lg;
    @apply text-3xl md:text-4xl font-bold text-amber-900 leading-tight;
    margin-top: 0;
  }

  .accordion-content :global(h1::before) {
    content: "‚≠ê ";
    @apply mr-4 text-5xl;
  }

  .accordion-content :global(h2) {
    @apply bg-gradient-to-r from-blue-100 to-indigo-100 border border-blue-200 rounded-xl p-6 mb-4 cursor-pointer select-none transition-all duration-300;
    @apply text-2xl font-bold text-blue-900 flex items-center justify-between;
    position: relative;
    margin-top: 2rem;
  }

  .accordion-content :global(h2::after) {
    content: "‚ñº";
    @apply text-2xl text-blue-600 transition-transform duration-300;
  }

  .accordion-content :global(h2.active::after) {
    transform: rotate(180deg);
  }

  .accordion-content :global(.section-content) {
    @apply bg-blue-50 border border-blue-200 rounded-xl overflow-hidden;
    max-height: 0;
    opacity: 0;
    margin-top: -1rem;
    margin-bottom: 1rem;
    transition: max-height 0.4s ease-in-out, opacity 0.3s ease-in-out;
  }

  .accordion-content :global(.section-content.active) {
    max-height: 2000px;
    opacity: 1;
    @apply p-8;
  }
</style>

<!-- Script del acorde√≥n (mantenido del original) -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const accordionContainer = document.getElementById('accordion-content');
    if (!accordionContainer) return;

    processMarkdownContent();

    function processMarkdownContent() {
      if (!accordionContainer) return;
      const h2Elements = accordionContainer.querySelectorAll('h2');
      
      h2Elements.forEach((h2, index) => {
        // Crear contenedor para el contenido de la secci√≥n
        const sectionContent = document.createElement('div');
        sectionContent.className = 'section-content';
        
        // Recopilar todo el contenido hasta el siguiente H2
        let nextElement = h2.nextElementSibling;
        const contentElements = [];
        
        while (nextElement && nextElement.tagName !== 'H2') {
          contentElements.push(nextElement);
          nextElement = nextElement.nextElementSibling;
        }
        
        // Mover contenido al contenedor de secci√≥n
        contentElements.forEach(element => {
          sectionContent.appendChild(element);
        });
        
        // Insertar el contenedor despu√©s del H2
        h2.parentNode?.insertBefore(sectionContent, h2.nextSibling);
        
        // Hacer la primera secci√≥n activa por defecto
        if (index === 0) {
          h2.classList.add('active');
          sectionContent.classList.add('active');
        }
        
        // A√±adir event listener para toggle
        h2.addEventListener('click', function() {
          const isActive = this.classList.contains('active');
          
          // Cerrar todas las secciones
          accordionContainer.querySelectorAll('h2').forEach(header => {
            header.classList.remove('active');
          });
          accordionContainer.querySelectorAll('.section-content').forEach(content => {
            content.classList.remove('active');
          });
          
          // Si no estaba activa, activarla
          if (!isActive) {
            this.classList.add('active');
            sectionContent.classList.add('active');
          }
        });
      });
    }
    
    console.log('‚úÖ BreedLayout acorde√≥n cargado correctamente');
  });
</script>