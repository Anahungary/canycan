---
// src/layouts/BreedLayout.astro - Layout para página de detalle de raza
import BaseLayout from './BaseLayout.astro';
import Container from '../components/ui/Container.astro';
import Badge from '../components/ui/Badge.astro';
import Button from '../components/ui/Button.astro';
import Card from '../components/ui/Card.astro';
import { Image } from 'astro:assets';
import type { BreedDetailProps } from '../types/breeds';
import { marked } from 'marked';


interface Props extends BreedDetailProps {}

const { 
  id,
  name, 
  images, 
  description, 
  type, 
  size, 
  weight, 
  height,
  lifespan,
  traits,
  goodWith,
  energyLevel,
  friendliness,
  grooming,
  training,
  hypoallergenic,
  history,
  origins,
  temperament,
  healthIssues,
  similarBreeds,
  careGuide
} = Astro.props;


const getComplexityLabel = (grooming: number): string => {
  if (grooming <= 2) return 'Baja';
  if (grooming <= 3) return 'Media';
  return 'Alta';
};

const getEnergyLabel = (energyLevel: number): string => {
  if (energyLevel <= 2) return 'Bajo';
  if (energyLevel <= 3) return 'Medio';
  return 'Alto';
};

const getExperienceLabel = (training: number): string => {
  if (training <= 2) return 'Principiante';
  if (training <= 3) return 'Intermedio';
  return 'Avanzado';
};

const getGroomingLabel = (grooming: number): string => {
  if (grooming <= 2) return 'poco mantenimiento';
  if (grooming <= 3) return 'mantenimiento moderado';
  return 'mantenimiento frecuente';
};

// Mapeo de tamaños a texto descriptivo
const sizeMap: Record<string, string> = {
  small: 'Pequeño',
  medium: 'Mediano',
  large: 'Grande'
};

// Función para renderizar estrellas de calificación
const renderRating = (rating: number): string => {
  return Array.from({ length: 5 }, (_, i) => {
    const filled = i < rating;
    return filled ? '★' : '☆';
  }).join('');
};

// Paleta de colores según el tipo
const typeColor = type === 'dog' ? 'bg-[#AFC2D5]' : 'bg-[#F6B89E]';
const typeText = type === 'dog' ? 'text-[#AFC2D5]' : 'text-[#F6B89E]';
const typeBgLight = type === 'dog' ? 'bg-[#AFC2D5] bg-opacity-10' : 'bg-[#F6B89E] bg-opacity-10';
---

<BaseLayout
  title={`${name} - Raza de ${type === 'dog' ? 'perro' : 'gato'}`}
  description={description.slice(0, 160) + '...'}
  ogImage={images[0]}
  bodyClass="breed-page"
>
  {/* Hero */}
  <div class={`py-8 ${typeBgLight}`}>
    <Container>
      <div class="flex flex-col md:flex-row gap-8">
        {/* Galería de imágenes */}
        <div class="md:w-1/2">
          <div class="relative rounded-lg overflow-hidden mb-4 h-80">
            <Image 
              src={images[0]} 
              alt={name}
              width={800}
              height={600}
              class="w-full h-full object-cover"
            />
            <div class={`absolute top-4 left-4 ${typeColor} text-white px-3 py-1 rounded-full text-sm`}>
              {type === 'dog' ? 'Perro' : 'Gato'}
            </div>
          </div>
          
          {images.length > 1 && (
            <div class="grid grid-cols-4 gap-2">
              {images.slice(1, 5).map((image, index) => (
                <div class="aspect-square rounded-md overflow-hidden">
                  <Image 
                    src={image} 
                    alt={`${name} imagen ${index + 2}`}
                    width={200}
                    height={200}
                    class="w-full h-full object-cover"
                  />
                </div>
              ))}
            </div>
          )}
        </div>
        
        {/* Información básica */}
        <div class="md:w-1/2">
          <h1 class="text-3xl md:text-4xl font-bold mb-3">{name}</h1>
          <p class="text-gray-600 mb-6">{description}</p>
          
          <div class="grid grid-cols-2 sm:grid-cols-3 gap-4 mb-6">
            <div class="bg-white p-3 rounded-lg border border-gray-200 text-center">
              <span class="text-gray-500 text-sm">Tamaño</span>
              <div class="font-bold">{sizeMap[size]}</div>
            </div>
            
            <div class="bg-white p-3 rounded-lg border border-gray-200 text-center">
              <span class="text-gray-500 text-sm">Peso</span>
              <div class="font-bold">{weight.min}-{weight.max} kg</div>
            </div>
            
            <div class="bg-white p-3 rounded-lg border border-gray-200 text-center">
              <span class="text-gray-500 text-sm">Esperanza de vida</span>
              <div class="font-bold">{lifespan.min}-{lifespan.max} años</div>
            </div>
          </div>
          
          <div class="mb-6">
            <h2 class="text-lg font-bold mb-2">Características principales</h2>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span>Nivel de energía</span>
                <span class="text-amber-500 font-medium">{renderRating(energyLevel)}</span>
              </div>
              <div class="flex justify-between items-center">
                <span>Sociabilidad</span>
                <span class="text-amber-500 font-medium">{renderRating(friendliness)}</span>
              </div>
              <div class="flex justify-between items-center">
                <span>Necesidad de cuidados</span>
                <span class="text-amber-500 font-medium">{renderRating(grooming)}</span>
              </div>
              <div class="flex justify-between items-center">
                <span>Facilidad de entrenamiento</span>
                <span class="text-amber-500 font-medium">{renderRating(training)}</span>
              </div>
            </div>
          </div>
          
          <div class="mb-6">
            <h2 class="text-lg font-bold mb-2">Convivencia óptima con</h2>
            <div class="flex flex-wrap gap-2">
              {goodWith.map(trait => (
                <Badge variant="info" size="md">{
                  trait === 'children' ? 'Niños' :
                  trait === 'dogs' ? 'Perros' :
                  trait === 'cats' ? 'Gatos' :
                  trait === 'seniors' ? 'Adultos mayores' :
                  trait === 'apartments' ? 'Apartamentos' : trait
                }</Badge>
              ))}
            </div>
          </div>
          
          <div class="flex flex-wrap gap-3 mt-8">
            <Button href="#cuidados" variant="primary">
              Guía de cuidados
            </Button>
            <Button href="#salud" variant="outline">
              Problemas de salud
            </Button>
            <Button href={`/comparador-razas?add=${id}`} variant="secondary">
              Comparar con otras razas
            </Button>
          </div>
        </div>
      </div>
    </Container>
  </div>
  
  {/* Navegación en página */}
  <div class="sticky top-[72px] z-10 bg-white border-y border-gray-200 py-2">
    <Container>
      <div class="flex gap-x-6 overflow-x-auto pb-1 -mx-2 px-2 scrollbar-hide">
        <a href="#historia" class="text-sm font-medium whitespace-nowrap py-2 hover:text-[#AFC2D5]">Historia</a>
        <a href="#temperamento" class="text-sm font-medium whitespace-nowrap py-2 hover:text-[#AFC2D5]">Temperamento</a>
        <a href="#cuidados" class="text-sm font-medium whitespace-nowrap py-2 hover:text-[#AFC2D5]">Cuidados</a>
        <a href="#salud" class="text-sm font-medium whitespace-nowrap py-2 hover:text-[#AFC2D5]">Salud</a>
        <a href="#razas-similares" class="text-sm font-medium whitespace-nowrap py-2 hover:text-[#AFC2D5]">Razas similares</a>
      </div>
    </Container>
  </div>
  
  {/* Contenido principal */}
  <div class="py-10">
    <Container>
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Columna principal */}
        <div class="lg:col-span-2 space-y-10">
          {/* Historia y orígenes */}
          <section id="historia" class="scroll-mt-24">
            <h2 class="text-2xl font-bold mb-4">Historia y orígenes</h2>
            <Card padding="md">
              <div class="prose max-w-none">
                <p>{history}</p>
                {origins && (
                  <div class="mt-4">
                    <h3 class="text-lg font-bold">Orígenes</h3>
                    <p>{origins}</p>
                  </div>
                )}
              </div>
            </Card>
          </section>
          
          {/* Temperamento */}
          <section id="temperamento" class="scroll-mt-24">
            <h2 class="text-2xl font-bold mb-4">Temperamento</h2>
            <Card padding="md">
              <div class="flex flex-wrap gap-2 mb-4">
                {temperament.map(trait => (
                  <Badge variant="primary" size="md" class="text-white">{trait} </Badge>
                ))}
              </div>
              
              <div class="mt-6 space-y-6">
                {traits.map(trait => (
                  <div>
                    <div class="flex justify-between mb-1">
                      <h3 class="font-medium">{trait.name}</h3>
                      <span class="text-amber-500">{renderRating(trait.value)}</span>
                    </div>
                    <p class="text-gray-600 text-sm">{trait.description}</p>
                  </div>
                ))}
              </div>
            </Card>
          </section>
          
          {/* Cuidados */}
          <section id="cuidados" class="scroll-mt-24">
  <h2 class="text-2xl font-bold mb-4">Guía de cuidados</h2>
  <Card padding="md">
    <div class="prose max-w-none" set:html={marked(careGuide)}></div>
  </Card>
</section>
          
          {/* Problemas de salud */}
          <section id="salud" class="scroll-mt-24">
            <h2 class="text-2xl font-bold mb-4">Problemas de salud comunes</h2>
            <Card padding="md">
              <div class="space-y-4">
                {healthIssues.map(issue => (
                  <div>
                    <h3 class="font-bold text-lg">{issue.name}</h3>
                    <p class="text-gray-600">{issue.description}</p>
                  </div>
                ))}
              </div>
            </Card>
          </section>
          
          {/* Razas similares */}
          <section id="razas-similares" class="scroll-mt-24">
            <h2 class="text-2xl font-bold mb-4">Razas similares</h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {similarBreeds.map(breed => (
                <a href={`/razas/${breed.id}`} class="flex items-center bg-white rounded-lg border border-gray-200 p-3 hover:shadow-md transition-shadow duration-200">
                  <div class="w-16 h-16 rounded-full overflow-hidden mr-3">
                    <Image 
                      src={breed.image} 
                      alt={breed.name}
                      width={64}
                      height={64}
                      class="w-full h-full object-cover"
                    />
                  </div>
                  <div>
                    <h3 class="font-bold">{breed.name}</h3>
                    <p class="text-sm text-gray-600">{breed.type === 'dog' ? 'Perro' : 'Gato'}, {sizeMap[breed.size]}</p>
                  </div>
                </a>
              ))}
            </div>
          </section>
        </div>
        
        {/* Sidebar */}
        <div class="lg:col-span-1">
          <div class="sticky top-[140px]">
            <Card variant="highlight" padding="md" class="mb-6">
              <h3 class="text-lg font-bold mb-3">Características clave</h3>
              <div class="space-y-3">
                <div class="flex justify-between">
                  <span>Hipoalergénico:</span>
                  <span class="font-medium">{hypoallergenic ? 'Sí' : 'No'}</span>
                </div>
                
                {height && (
                  <div class="flex justify-between">
                    <span>Altura:</span>
                    <span class="font-medium">{height.min}-{height.max} cm</span>
                  </div>
                )}
                
                <div class="flex justify-between">
                  <span>Tamaño:</span>
                  <span class="font-medium">{sizeMap[size]}</span>
                </div>
                
                <div class="flex justify-between">
                  <span>Complejidad de cuidados:</span>
                  <span class="font-medium">{getComplexityLabel(grooming)}</span>
                </div>
                
                <div class="flex justify-between">
                  <span>Nivel de ejercicio:</span>
                  <span class="font-medium">{getEnergyLabel(energyLevel)}</span>
                </div>
                
                <div class="flex justify-between">
                  <span>Experiencia requerida:</span>
                  <span class="font-medium">{getExperienceLabel(training)}</span>
                </div>
              </div>
              
              <div class="mt-6">
                <Button 
                  href={`/comparador-razas?add=${id}`} 
                  variant="primary" 
                  fullWidth={true}
                >
                  Comparar con otras razas
                </Button>
              </div>
            </Card>
            
            <Card variant="default" padding="md">
              <h3 class="text-lg font-bold mb-3">¿Esta raza es para ti?</h3>
              <div class="space-y-3">
                <div class="flex items-start">
                  <div class={`w-6 h-6 rounded-full ${typeColor} flex items-center justify-center text-white flex-shrink-0 mt-0.5`}>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <p class="ml-3 text-sm">Necesita {getGroomingLabel(grooming)}</p>
                </div>
                
                <div class="flex items-start">
                  <div class={`w-6 h-6 rounded-full ${typeColor} flex items-center justify-center text-white flex-shrink-0 mt-0.5`}>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <p class="ml-3 text-sm">{
                    friendliness >= 4 ? 'Excelente para familias' :
                    friendliness >= 3 ? 'Bueno para familias' : 'Mejor para adultos'
                  }</p>
                </div>
                
                <div class="flex items-start">
                  <div class={`w-6 h-6 rounded-full ${typeColor} flex items-center justify-center text-white flex-shrink-0 mt-0.5`}>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <p class="ml-3 text-sm">{
                    hypoallergenic ? 'Adecuado para personas con alergias' : 'No recomendado para personas con alergias'
                  }</p>
                </div>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </Container>
  </div>
  
  <script>
  document.addEventListener('DOMContentLoaded', () => {
    const navLinks = document.querySelectorAll('a[href^="#"]');

    navLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();

        const targetId = link.getAttribute('href');
        if (targetId) {
          const targetElement = document.querySelector(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });

            // Compensar scroll por navbar fija
            setTimeout(() => {
              window.scrollBy(0, -120);
            }, 10);

            history.pushState(null, '', targetId);
          }
        }
      });
    });
  });
</script>

</BaseLayout>