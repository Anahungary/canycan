---
// BaseLayout.astro - Layout base para todas las páginas
import Header from '../components/common/Header.astro';
import Footer from '../components/common/Footer.astro';
import '../styles/global.css';

interface Props {
  title: string;
  description?: string;
  ogImage?: string;
  canonicalUrl?: string;
  bodyClass?: string;
}

const { 
  title, 
  description = 'La revista digital para amantes de mascotas: consejos, guías, comparativa de razas y más.',
  ogImage = '/og-image.jpg',
  canonicalUrl,
  bodyClass = '',
} = Astro.props;

// URL canónica
const siteUrl = import.meta.env.SITE || 'https://canicat.netlify.app';
const canonical = canonicalUrl 
  ? (canonicalUrl.startsWith('http') ? canonicalUrl : `${siteUrl}${canonicalUrl}`) 
  : `${siteUrl}${Astro.url.pathname}`;
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title} | PataDigital</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonical} />
    
    <!-- ✅ Netlify Identity Widget -->
    <script src="https://identity.netlify.com/v1/netlify-identity-widget.js" is:inline></script>
    
    <!-- Favicons -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage.startsWith('http') ? ogImage : `${siteUrl}${ogImage}`} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonical} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={ogImage.startsWith('http') ? ogImage : `${siteUrl}${ogImage}`} />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    
    <slot name="head" />
  </head>
  <body class={`min-h-screen flex flex-col bg-[#FAFAFA] font-inter text-[#2E2E2E] ${bodyClass}`}>
    <Header />
    
    <main class="flex-grow">
      <slot />
    </main>
    
    <Footer />
    
    <!-- ✅ Netlify Identity Script Inline -->
    <script is:inline>
      // Configuración de Netlify Identity para PataDigital
      (function() {
        'use strict';

        // Esperar a que Netlify Identity esté cargado
        function waitForNetlifyIdentity() {
          return new Promise((resolve) => {
            if (window.netlifyIdentity) {
              resolve(window.netlifyIdentity);
            } else {
              const checkIdentity = setInterval(() => {
                if (window.netlifyIdentity) {
                  clearInterval(checkIdentity);
                  resolve(window.netlifyIdentity);
                }
              }, 100);
            }
          });
        }

        // Inicializar cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', async function() {
          const identity = await waitForNetlifyIdentity();
          
          // Configuración inicial
          identity.on('init', user => {
            console.log('Netlify Identity inicializado', user ? 'con usuario' : 'sin usuario');
            
            if (!user) {
              // Configurar eventos para usuarios no logueados
              identity.on('login', () => {
                console.log('Usuario logueado, redirigiendo...');
                document.location.href = '/admin/';
              });
            }
          });

          // Manejar confirmación de email desde URL
          handleEmailConfirmation(identity);
          
          // Manejar recuperación de contraseña
          handlePasswordRecovery(identity);
        });

        // Función para manejar tokens de confirmación
        function handleEmailConfirmation(identity) {
          const hash = window.location.hash;
          if (!hash) return;

          // Buscar token de confirmación
          const params = new URLSearchParams(hash.substring(1));
          const confirmationToken = params.get('confirmation_token');
          
          if (confirmationToken) {
            console.log('Token de confirmación encontrado, procesando...');
            
            identity.confirm(confirmationToken)
              .then(() => {
                console.log('✅ Email confirmado exitosamente');
                
                // Mostrar mensaje de éxito
                showNotification('¡Email confirmado exitosamente! Ya puedes acceder al panel de administración.', 'success');
                
                // Limpiar URL
                window.history.replaceState({}, document.title, window.location.pathname);
                
                // Redirigir después de 2 segundos
                setTimeout(() => {
                  window.location.href = '/admin/';
                }, 2000);
              })
              .catch(error => {
                console.error('❌ Error al confirmar email:', error);
                showNotification('Error al confirmar el email. Por favor, intenta nuevamente.', 'error');
              });
          }
        }

        // Función para manejar recuperación de contraseña
        function handlePasswordRecovery(identity) {
          const hash = window.location.hash;
          if (!hash) return;

          const params = new URLSearchParams(hash.substring(1));
          const recoveryToken = params.get('recovery_token');
          
          if (recoveryToken) {
            console.log('Token de recuperación encontrado');
            // Netlify Identity maneja esto automáticamente
            // Solo necesitamos limpiar la URL después
            setTimeout(() => {
              window.history.replaceState({}, document.title, window.location.pathname);
            }, 1000);
          }
        }

        // Función para mostrar notificaciones
        function showNotification(message, type = 'info') {
          // Crear elemento de notificación
          const notification = document.createElement('div');
          notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            color: white;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            font-size: 14px;
            z-index: 10000;
            max-width: 400px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            background-color: ${type === 'success' ? '#10B981' : type === 'error' ? '#EF4444' : '#3B82F6'};
            animation: slideIn 0.3s ease-out;
          `;
          notification.textContent = message;
          
          // Agregar estilos de animación si no existen
          if (!document.getElementById('netlify-notification-styles')) {
            const styles = document.createElement('style');
            styles.id = 'netlify-notification-styles';
            styles.innerHTML = `
              @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
              }
            `;
            document.head.appendChild(styles);
          }
          
          document.body.appendChild(notification);
          
          // Remover después de 5 segundos
          setTimeout(() => {
            notification.style.animation = 'slideIn 0.3s ease-out reverse';
            setTimeout(() => {
              if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
              }
            }, 300);
          }, 5000);
        }

        // Exponer funciones útiles globalmente
        window.PataDigitalAuth = {
          openAuth: () => {
            if (window.netlifyIdentity) {
              window.netlifyIdentity.open();
            }
          },
          
          getCurrentUser: () => {
            return window.netlifyIdentity ? window.netlifyIdentity.currentUser() : null;
          },
          
          logout: () => {
            if (window.netlifyIdentity) {
              window.netlifyIdentity.logout();
            }
          }
        };

      })();
    </script>
    
    <!-- Scripts adicionales -->
    <script src="/scripts/main.js" defer></script>
    <slot name="scripts" />
  </body>
</html>